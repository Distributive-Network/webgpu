import fs from "fs";
import https from "https";
import nunjucks from "nunjucks";

import pkg from "../package.json";

import {
  warn,
  getPlatform
} from "./utils.mjs";

import generateIndex from "./generators/index.mjs";
import generateGyp from "./generators/gyp.mjs";

const GEN_FILE_NOTICE = `/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY ${pkg.name} v${pkg.version}
 */
`;

function writeGeneratedFile(path, text, includeNotice = true) {
  if (typeof text !== "string") throw new TypeError(`Expected 'string' type for parameter 'text'`);
  // append notice
  if (includeNotice) text = GEN_FILE_NOTICE + text;
  fs.writeFileSync(path, text);
};

async function generateBindings({ version, disableMinification } = _) {
  let ast = JSON.parse(fs.readFileSync(pkg.config.SPEC_DIR + `/${version}.json`, "utf-8"));
  let fakePlatform = process.env.npm_config_fake_platform;
  // let the user know when he uses a fake platform
  if (fakePlatform) {
    console.log(`Fake platform enabled!`);
    console.log(`Fake platform: '${fakePlatform}' - Real platform: '${process.platform}'`);
  }
  if (disableMinification) {
    console.log(`Code minification is disabled!`);
  }
  // dst write paths
  const baseGeneratePath = pkg.config.GEN_OUT_DIR;
  const generateVersionPath = `${baseGeneratePath}/${version}`;
  const generatePath = `${generateVersionPath}/${getPlatform()}`;
  const generateSrcPath = `${generatePath}/src`;
  // reserve dst write paths
  {
    // generated/
    if (!fs.existsSync(baseGeneratePath)) fs.mkdirSync(baseGeneratePath);
    // generated/version/
    if (!fs.existsSync(generateVersionPath)) fs.mkdirSync(generateVersionPath);
    // generated/version/platform/
    if (!fs.existsSync(generatePath)) fs.mkdirSync(generatePath);
    // generated/version/platform/src/
    if (!fs.existsSync(generateSrcPath)) fs.mkdirSync(generateSrcPath);
  }
  console.log(`Generating bindings for ${version}...`);
  // generate gyp
  {
    let out = generateGyp(ast);
    // .gyp
    writeGeneratedFile(`${generatePath}/binding.gyp`, out.gyp, false);
  }
  // generate index
  {
    let out = generateIndex(ast);
    // h
    writeGeneratedFile(`${generatePath}/src/index.h`, out.header);
    // cpp
    writeGeneratedFile(`${generatePath}/src/index.cpp`, out.source);
  }
  console.log(`Successfully generated bindings!`);
};

const dawnVersion = process.env.npm_config_dawnversion;
if (!dawnVersion) throw `No Dawn version --dawnversion specified!`;

generateBindings({ version: dawnVersion, disableMinification: true });
