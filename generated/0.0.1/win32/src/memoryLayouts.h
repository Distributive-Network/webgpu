/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY webgpu v0.0.2
 */
#include <dawn/dawn.h>
#include <dawn/dawn_wsi.h>
#include <dawn/dawncpp.h>
#include <dawn_native/DawnNative.h>

Napi::Value MemoryLayouts(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  Napi::Object out = Napi::Object::New(env);

  Napi::String strByteOffset = Napi::String::New(env, "byteOffset");
  Napi::String strByteLength = Napi::String::New(env, "byteLength");

  Napi::Object sDawnBindGroupBinding = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnBindGroupBinding, binding)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnBindGroupBinding::binding)));
    sDawnBindGroupBinding.Set(Napi::String::New(env, "binding"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnBindGroupBinding, buffer)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnBindGroupBinding::buffer)));
    sDawnBindGroupBinding.Set(Napi::String::New(env, "buffer"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnBindGroupBinding, offset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnBindGroupBinding::offset)));
    sDawnBindGroupBinding.Set(Napi::String::New(env, "offset"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnBindGroupBinding, size)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnBindGroupBinding::size)));
    sDawnBindGroupBinding.Set(Napi::String::New(env, "size"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnBindGroupBinding, sampler)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnBindGroupBinding::sampler)));
    sDawnBindGroupBinding.Set(Napi::String::New(env, "sampler"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnBindGroupBinding, textureView)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnBindGroupBinding::textureView)));
    sDawnBindGroupBinding.Set(Napi::String::New(env, "textureView"), obj);
  }
  sDawnBindGroupBinding.Set(strByteLength, Napi::Number::New(env, sizeof(DawnBindGroupBinding)));
  out.Set(Napi::String::New(env, "DawnBindGroupBinding"), sDawnBindGroupBinding);
  Napi::Object sDawnBindGroupDescriptor = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnBindGroupDescriptor, layout)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnBindGroupDescriptor::layout)));
    sDawnBindGroupDescriptor.Set(Napi::String::New(env, "layout"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnBindGroupDescriptor, bindingCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnBindGroupDescriptor::bindingCount)));
    sDawnBindGroupDescriptor.Set(Napi::String::New(env, "bindingCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnBindGroupDescriptor, bindings)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnBindGroupDescriptor::bindings)));
    sDawnBindGroupDescriptor.Set(Napi::String::New(env, "bindings"), obj);
  }
  sDawnBindGroupDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(DawnBindGroupDescriptor)));
  out.Set(Napi::String::New(env, "DawnBindGroupDescriptor"), sDawnBindGroupDescriptor);
  Napi::Object sDawnBindGroupLayoutBinding = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnBindGroupLayoutBinding, binding)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnBindGroupLayoutBinding::binding)));
    sDawnBindGroupLayoutBinding.Set(Napi::String::New(env, "binding"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnBindGroupLayoutBinding, visibility)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnBindGroupLayoutBinding::visibility)));
    sDawnBindGroupLayoutBinding.Set(Napi::String::New(env, "visibility"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnBindGroupLayoutBinding, type)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnBindGroupLayoutBinding::type)));
    sDawnBindGroupLayoutBinding.Set(Napi::String::New(env, "type"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnBindGroupLayoutBinding, dynamic)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnBindGroupLayoutBinding::dynamic)));
    sDawnBindGroupLayoutBinding.Set(Napi::String::New(env, "dynamic"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnBindGroupLayoutBinding, multisampled)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnBindGroupLayoutBinding::multisampled)));
    sDawnBindGroupLayoutBinding.Set(Napi::String::New(env, "multisampled"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnBindGroupLayoutBinding, textureDimension)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnBindGroupLayoutBinding::textureDimension)));
    sDawnBindGroupLayoutBinding.Set(Napi::String::New(env, "textureDimension"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnBindGroupLayoutBinding, textureComponentType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnBindGroupLayoutBinding::textureComponentType)));
    sDawnBindGroupLayoutBinding.Set(Napi::String::New(env, "textureComponentType"), obj);
  }
  sDawnBindGroupLayoutBinding.Set(strByteLength, Napi::Number::New(env, sizeof(DawnBindGroupLayoutBinding)));
  out.Set(Napi::String::New(env, "DawnBindGroupLayoutBinding"), sDawnBindGroupLayoutBinding);
  Napi::Object sDawnBindGroupLayoutDescriptor = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnBindGroupLayoutDescriptor, bindingCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnBindGroupLayoutDescriptor::bindingCount)));
    sDawnBindGroupLayoutDescriptor.Set(Napi::String::New(env, "bindingCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnBindGroupLayoutDescriptor, bindings)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnBindGroupLayoutDescriptor::bindings)));
    sDawnBindGroupLayoutDescriptor.Set(Napi::String::New(env, "bindings"), obj);
  }
  sDawnBindGroupLayoutDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(DawnBindGroupLayoutDescriptor)));
  out.Set(Napi::String::New(env, "DawnBindGroupLayoutDescriptor"), sDawnBindGroupLayoutDescriptor);
  Napi::Object sDawnBlendDescriptor = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnBlendDescriptor, operation)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnBlendDescriptor::operation)));
    sDawnBlendDescriptor.Set(Napi::String::New(env, "operation"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnBlendDescriptor, srcFactor)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnBlendDescriptor::srcFactor)));
    sDawnBlendDescriptor.Set(Napi::String::New(env, "srcFactor"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnBlendDescriptor, dstFactor)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnBlendDescriptor::dstFactor)));
    sDawnBlendDescriptor.Set(Napi::String::New(env, "dstFactor"), obj);
  }
  sDawnBlendDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(DawnBlendDescriptor)));
  out.Set(Napi::String::New(env, "DawnBlendDescriptor"), sDawnBlendDescriptor);
  Napi::Object sDawnColorStateDescriptor = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnColorStateDescriptor, format)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnColorStateDescriptor::format)));
    sDawnColorStateDescriptor.Set(Napi::String::New(env, "format"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnColorStateDescriptor, alphaBlend)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnColorStateDescriptor::alphaBlend)));
    sDawnColorStateDescriptor.Set(Napi::String::New(env, "alphaBlend"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnColorStateDescriptor, colorBlend)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnColorStateDescriptor::colorBlend)));
    sDawnColorStateDescriptor.Set(Napi::String::New(env, "colorBlend"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnColorStateDescriptor, writeMask)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnColorStateDescriptor::writeMask)));
    sDawnColorStateDescriptor.Set(Napi::String::New(env, "writeMask"), obj);
  }
  sDawnColorStateDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(DawnColorStateDescriptor)));
  out.Set(Napi::String::New(env, "DawnColorStateDescriptor"), sDawnColorStateDescriptor);
  Napi::Object sDawnBufferCopyView = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnBufferCopyView, buffer)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnBufferCopyView::buffer)));
    sDawnBufferCopyView.Set(Napi::String::New(env, "buffer"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnBufferCopyView, offset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnBufferCopyView::offset)));
    sDawnBufferCopyView.Set(Napi::String::New(env, "offset"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnBufferCopyView, rowPitch)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnBufferCopyView::rowPitch)));
    sDawnBufferCopyView.Set(Napi::String::New(env, "rowPitch"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnBufferCopyView, imageHeight)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnBufferCopyView::imageHeight)));
    sDawnBufferCopyView.Set(Napi::String::New(env, "imageHeight"), obj);
  }
  sDawnBufferCopyView.Set(strByteLength, Napi::Number::New(env, sizeof(DawnBufferCopyView)));
  out.Set(Napi::String::New(env, "DawnBufferCopyView"), sDawnBufferCopyView);
  Napi::Object sDawnBufferDescriptor = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnBufferDescriptor, usage)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnBufferDescriptor::usage)));
    sDawnBufferDescriptor.Set(Napi::String::New(env, "usage"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnBufferDescriptor, size)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnBufferDescriptor::size)));
    sDawnBufferDescriptor.Set(Napi::String::New(env, "size"), obj);
  }
  sDawnBufferDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(DawnBufferDescriptor)));
  out.Set(Napi::String::New(env, "DawnBufferDescriptor"), sDawnBufferDescriptor);
  Napi::Object sDawnCreateBufferMappedResult = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnCreateBufferMappedResult, buffer)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnCreateBufferMappedResult::buffer)));
    sDawnCreateBufferMappedResult.Set(Napi::String::New(env, "buffer"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnCreateBufferMappedResult, dataLength)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnCreateBufferMappedResult::dataLength)));
    sDawnCreateBufferMappedResult.Set(Napi::String::New(env, "dataLength"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnCreateBufferMappedResult, data)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnCreateBufferMappedResult::data)));
    sDawnCreateBufferMappedResult.Set(Napi::String::New(env, "data"), obj);
  }
  sDawnCreateBufferMappedResult.Set(strByteLength, Napi::Number::New(env, sizeof(DawnCreateBufferMappedResult)));
  out.Set(Napi::String::New(env, "DawnCreateBufferMappedResult"), sDawnCreateBufferMappedResult);
  Napi::Object sDawnColor = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnColor, r)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnColor::r)));
    sDawnColor.Set(Napi::String::New(env, "r"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnColor, g)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnColor::g)));
    sDawnColor.Set(Napi::String::New(env, "g"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnColor, b)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnColor::b)));
    sDawnColor.Set(Napi::String::New(env, "b"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnColor, a)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnColor::a)));
    sDawnColor.Set(Napi::String::New(env, "a"), obj);
  }
  sDawnColor.Set(strByteLength, Napi::Number::New(env, sizeof(DawnColor)));
  out.Set(Napi::String::New(env, "DawnColor"), sDawnColor);
  Napi::Object sDawnCommandBufferDescriptor = Napi::Object::New(env);
  sDawnCommandBufferDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(DawnCommandBufferDescriptor)));
  out.Set(Napi::String::New(env, "DawnCommandBufferDescriptor"), sDawnCommandBufferDescriptor);
  Napi::Object sDawnCommandEncoderDescriptor = Napi::Object::New(env);
  sDawnCommandEncoderDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(DawnCommandEncoderDescriptor)));
  out.Set(Napi::String::New(env, "DawnCommandEncoderDescriptor"), sDawnCommandEncoderDescriptor);
  Napi::Object sDawnComputePassDescriptor = Napi::Object::New(env);
  sDawnComputePassDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(DawnComputePassDescriptor)));
  out.Set(Napi::String::New(env, "DawnComputePassDescriptor"), sDawnComputePassDescriptor);
  Napi::Object sDawnComputePipelineDescriptor = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnComputePipelineDescriptor, layout)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnComputePipelineDescriptor::layout)));
    sDawnComputePipelineDescriptor.Set(Napi::String::New(env, "layout"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnComputePipelineDescriptor, computeStage)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnComputePipelineDescriptor::computeStage)));
    sDawnComputePipelineDescriptor.Set(Napi::String::New(env, "computeStage"), obj);
  }
  sDawnComputePipelineDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(DawnComputePipelineDescriptor)));
  out.Set(Napi::String::New(env, "DawnComputePipelineDescriptor"), sDawnComputePipelineDescriptor);
  Napi::Object sDawnDepthStencilStateDescriptor = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnDepthStencilStateDescriptor, format)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnDepthStencilStateDescriptor::format)));
    sDawnDepthStencilStateDescriptor.Set(Napi::String::New(env, "format"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnDepthStencilStateDescriptor, depthWriteEnabled)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnDepthStencilStateDescriptor::depthWriteEnabled)));
    sDawnDepthStencilStateDescriptor.Set(Napi::String::New(env, "depthWriteEnabled"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnDepthStencilStateDescriptor, depthCompare)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnDepthStencilStateDescriptor::depthCompare)));
    sDawnDepthStencilStateDescriptor.Set(Napi::String::New(env, "depthCompare"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnDepthStencilStateDescriptor, stencilFront)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnDepthStencilStateDescriptor::stencilFront)));
    sDawnDepthStencilStateDescriptor.Set(Napi::String::New(env, "stencilFront"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnDepthStencilStateDescriptor, stencilBack)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnDepthStencilStateDescriptor::stencilBack)));
    sDawnDepthStencilStateDescriptor.Set(Napi::String::New(env, "stencilBack"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnDepthStencilStateDescriptor, stencilReadMask)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnDepthStencilStateDescriptor::stencilReadMask)));
    sDawnDepthStencilStateDescriptor.Set(Napi::String::New(env, "stencilReadMask"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnDepthStencilStateDescriptor, stencilWriteMask)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnDepthStencilStateDescriptor::stencilWriteMask)));
    sDawnDepthStencilStateDescriptor.Set(Napi::String::New(env, "stencilWriteMask"), obj);
  }
  sDawnDepthStencilStateDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(DawnDepthStencilStateDescriptor)));
  out.Set(Napi::String::New(env, "DawnDepthStencilStateDescriptor"), sDawnDepthStencilStateDescriptor);
  Napi::Object sDawnExtent3D = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnExtent3D, width)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnExtent3D::width)));
    sDawnExtent3D.Set(Napi::String::New(env, "width"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnExtent3D, height)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnExtent3D::height)));
    sDawnExtent3D.Set(Napi::String::New(env, "height"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnExtent3D, depth)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnExtent3D::depth)));
    sDawnExtent3D.Set(Napi::String::New(env, "depth"), obj);
  }
  sDawnExtent3D.Set(strByteLength, Napi::Number::New(env, sizeof(DawnExtent3D)));
  out.Set(Napi::String::New(env, "DawnExtent3D"), sDawnExtent3D);
  Napi::Object sDawnFenceDescriptor = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnFenceDescriptor, initialValue)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnFenceDescriptor::initialValue)));
    sDawnFenceDescriptor.Set(Napi::String::New(env, "initialValue"), obj);
  }
  sDawnFenceDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(DawnFenceDescriptor)));
  out.Set(Napi::String::New(env, "DawnFenceDescriptor"), sDawnFenceDescriptor);
  Napi::Object sDawnVertexAttributeDescriptor = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnVertexAttributeDescriptor, shaderLocation)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnVertexAttributeDescriptor::shaderLocation)));
    sDawnVertexAttributeDescriptor.Set(Napi::String::New(env, "shaderLocation"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnVertexAttributeDescriptor, offset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnVertexAttributeDescriptor::offset)));
    sDawnVertexAttributeDescriptor.Set(Napi::String::New(env, "offset"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnVertexAttributeDescriptor, format)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnVertexAttributeDescriptor::format)));
    sDawnVertexAttributeDescriptor.Set(Napi::String::New(env, "format"), obj);
  }
  sDawnVertexAttributeDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(DawnVertexAttributeDescriptor)));
  out.Set(Napi::String::New(env, "DawnVertexAttributeDescriptor"), sDawnVertexAttributeDescriptor);
  Napi::Object sDawnVertexBufferDescriptor = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnVertexBufferDescriptor, stride)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnVertexBufferDescriptor::stride)));
    sDawnVertexBufferDescriptor.Set(Napi::String::New(env, "stride"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnVertexBufferDescriptor, stepMode)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnVertexBufferDescriptor::stepMode)));
    sDawnVertexBufferDescriptor.Set(Napi::String::New(env, "stepMode"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnVertexBufferDescriptor, attributeCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnVertexBufferDescriptor::attributeCount)));
    sDawnVertexBufferDescriptor.Set(Napi::String::New(env, "attributeCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnVertexBufferDescriptor, attributes)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnVertexBufferDescriptor::attributes)));
    sDawnVertexBufferDescriptor.Set(Napi::String::New(env, "attributes"), obj);
  }
  sDawnVertexBufferDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(DawnVertexBufferDescriptor)));
  out.Set(Napi::String::New(env, "DawnVertexBufferDescriptor"), sDawnVertexBufferDescriptor);
  Napi::Object sDawnVertexInputDescriptor = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnVertexInputDescriptor, indexFormat)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnVertexInputDescriptor::indexFormat)));
    sDawnVertexInputDescriptor.Set(Napi::String::New(env, "indexFormat"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnVertexInputDescriptor, bufferCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnVertexInputDescriptor::bufferCount)));
    sDawnVertexInputDescriptor.Set(Napi::String::New(env, "bufferCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnVertexInputDescriptor, buffers)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnVertexInputDescriptor::buffers)));
    sDawnVertexInputDescriptor.Set(Napi::String::New(env, "buffers"), obj);
  }
  sDawnVertexInputDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(DawnVertexInputDescriptor)));
  out.Set(Napi::String::New(env, "DawnVertexInputDescriptor"), sDawnVertexInputDescriptor);
  Napi::Object sDawnOrigin3D = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnOrigin3D, x)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnOrigin3D::x)));
    sDawnOrigin3D.Set(Napi::String::New(env, "x"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnOrigin3D, y)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnOrigin3D::y)));
    sDawnOrigin3D.Set(Napi::String::New(env, "y"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnOrigin3D, z)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnOrigin3D::z)));
    sDawnOrigin3D.Set(Napi::String::New(env, "z"), obj);
  }
  sDawnOrigin3D.Set(strByteLength, Napi::Number::New(env, sizeof(DawnOrigin3D)));
  out.Set(Napi::String::New(env, "DawnOrigin3D"), sDawnOrigin3D);
  Napi::Object sDawnPipelineLayoutDescriptor = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnPipelineLayoutDescriptor, bindGroupLayoutCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnPipelineLayoutDescriptor::bindGroupLayoutCount)));
    sDawnPipelineLayoutDescriptor.Set(Napi::String::New(env, "bindGroupLayoutCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnPipelineLayoutDescriptor, bindGroupLayouts)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnPipelineLayoutDescriptor::bindGroupLayouts)));
    sDawnPipelineLayoutDescriptor.Set(Napi::String::New(env, "bindGroupLayouts"), obj);
  }
  sDawnPipelineLayoutDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(DawnPipelineLayoutDescriptor)));
  out.Set(Napi::String::New(env, "DawnPipelineLayoutDescriptor"), sDawnPipelineLayoutDescriptor);
  Napi::Object sDawnPipelineStageDescriptor = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnPipelineStageDescriptor, module)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnPipelineStageDescriptor::module)));
    sDawnPipelineStageDescriptor.Set(Napi::String::New(env, "module"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnPipelineStageDescriptor, entryPoint)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnPipelineStageDescriptor::entryPoint)));
    sDawnPipelineStageDescriptor.Set(Napi::String::New(env, "entryPoint"), obj);
  }
  sDawnPipelineStageDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(DawnPipelineStageDescriptor)));
  out.Set(Napi::String::New(env, "DawnPipelineStageDescriptor"), sDawnPipelineStageDescriptor);
  Napi::Object sDawnRasterizationStateDescriptor = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnRasterizationStateDescriptor, frontFace)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnRasterizationStateDescriptor::frontFace)));
    sDawnRasterizationStateDescriptor.Set(Napi::String::New(env, "frontFace"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnRasterizationStateDescriptor, cullMode)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnRasterizationStateDescriptor::cullMode)));
    sDawnRasterizationStateDescriptor.Set(Napi::String::New(env, "cullMode"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnRasterizationStateDescriptor, depthBias)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnRasterizationStateDescriptor::depthBias)));
    sDawnRasterizationStateDescriptor.Set(Napi::String::New(env, "depthBias"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnRasterizationStateDescriptor, depthBiasSlopeScale)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnRasterizationStateDescriptor::depthBiasSlopeScale)));
    sDawnRasterizationStateDescriptor.Set(Napi::String::New(env, "depthBiasSlopeScale"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnRasterizationStateDescriptor, depthBiasClamp)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnRasterizationStateDescriptor::depthBiasClamp)));
    sDawnRasterizationStateDescriptor.Set(Napi::String::New(env, "depthBiasClamp"), obj);
  }
  sDawnRasterizationStateDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(DawnRasterizationStateDescriptor)));
  out.Set(Napi::String::New(env, "DawnRasterizationStateDescriptor"), sDawnRasterizationStateDescriptor);
  Napi::Object sDawnRenderBundleDescriptor = Napi::Object::New(env);
  sDawnRenderBundleDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(DawnRenderBundleDescriptor)));
  out.Set(Napi::String::New(env, "DawnRenderBundleDescriptor"), sDawnRenderBundleDescriptor);
  Napi::Object sDawnRenderBundleEncoderDescriptor = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnRenderBundleEncoderDescriptor, colorFormatsCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnRenderBundleEncoderDescriptor::colorFormatsCount)));
    sDawnRenderBundleEncoderDescriptor.Set(Napi::String::New(env, "colorFormatsCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnRenderBundleEncoderDescriptor, colorFormats)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnRenderBundleEncoderDescriptor::colorFormats)));
    sDawnRenderBundleEncoderDescriptor.Set(Napi::String::New(env, "colorFormats"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnRenderBundleEncoderDescriptor, depthStencilFormat)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnRenderBundleEncoderDescriptor::depthStencilFormat)));
    sDawnRenderBundleEncoderDescriptor.Set(Napi::String::New(env, "depthStencilFormat"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnRenderBundleEncoderDescriptor, sampleCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnRenderBundleEncoderDescriptor::sampleCount)));
    sDawnRenderBundleEncoderDescriptor.Set(Napi::String::New(env, "sampleCount"), obj);
  }
  sDawnRenderBundleEncoderDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(DawnRenderBundleEncoderDescriptor)));
  out.Set(Napi::String::New(env, "DawnRenderBundleEncoderDescriptor"), sDawnRenderBundleEncoderDescriptor);
  Napi::Object sDawnRenderPassColorAttachmentDescriptor = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnRenderPassColorAttachmentDescriptor, attachment)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnRenderPassColorAttachmentDescriptor::attachment)));
    sDawnRenderPassColorAttachmentDescriptor.Set(Napi::String::New(env, "attachment"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnRenderPassColorAttachmentDescriptor, resolveTarget)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnRenderPassColorAttachmentDescriptor::resolveTarget)));
    sDawnRenderPassColorAttachmentDescriptor.Set(Napi::String::New(env, "resolveTarget"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnRenderPassColorAttachmentDescriptor, loadOp)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnRenderPassColorAttachmentDescriptor::loadOp)));
    sDawnRenderPassColorAttachmentDescriptor.Set(Napi::String::New(env, "loadOp"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnRenderPassColorAttachmentDescriptor, storeOp)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnRenderPassColorAttachmentDescriptor::storeOp)));
    sDawnRenderPassColorAttachmentDescriptor.Set(Napi::String::New(env, "storeOp"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnRenderPassColorAttachmentDescriptor, clearColor)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnRenderPassColorAttachmentDescriptor::clearColor)));
    sDawnRenderPassColorAttachmentDescriptor.Set(Napi::String::New(env, "clearColor"), obj);
  }
  sDawnRenderPassColorAttachmentDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(DawnRenderPassColorAttachmentDescriptor)));
  out.Set(Napi::String::New(env, "DawnRenderPassColorAttachmentDescriptor"), sDawnRenderPassColorAttachmentDescriptor);
  Napi::Object sDawnRenderPassDepthStencilAttachmentDescriptor = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnRenderPassDepthStencilAttachmentDescriptor, attachment)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnRenderPassDepthStencilAttachmentDescriptor::attachment)));
    sDawnRenderPassDepthStencilAttachmentDescriptor.Set(Napi::String::New(env, "attachment"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnRenderPassDepthStencilAttachmentDescriptor, depthLoadOp)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnRenderPassDepthStencilAttachmentDescriptor::depthLoadOp)));
    sDawnRenderPassDepthStencilAttachmentDescriptor.Set(Napi::String::New(env, "depthLoadOp"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnRenderPassDepthStencilAttachmentDescriptor, depthStoreOp)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnRenderPassDepthStencilAttachmentDescriptor::depthStoreOp)));
    sDawnRenderPassDepthStencilAttachmentDescriptor.Set(Napi::String::New(env, "depthStoreOp"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnRenderPassDepthStencilAttachmentDescriptor, clearDepth)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnRenderPassDepthStencilAttachmentDescriptor::clearDepth)));
    sDawnRenderPassDepthStencilAttachmentDescriptor.Set(Napi::String::New(env, "clearDepth"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnRenderPassDepthStencilAttachmentDescriptor, stencilLoadOp)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnRenderPassDepthStencilAttachmentDescriptor::stencilLoadOp)));
    sDawnRenderPassDepthStencilAttachmentDescriptor.Set(Napi::String::New(env, "stencilLoadOp"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnRenderPassDepthStencilAttachmentDescriptor, stencilStoreOp)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnRenderPassDepthStencilAttachmentDescriptor::stencilStoreOp)));
    sDawnRenderPassDepthStencilAttachmentDescriptor.Set(Napi::String::New(env, "stencilStoreOp"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnRenderPassDepthStencilAttachmentDescriptor, clearStencil)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnRenderPassDepthStencilAttachmentDescriptor::clearStencil)));
    sDawnRenderPassDepthStencilAttachmentDescriptor.Set(Napi::String::New(env, "clearStencil"), obj);
  }
  sDawnRenderPassDepthStencilAttachmentDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(DawnRenderPassDepthStencilAttachmentDescriptor)));
  out.Set(Napi::String::New(env, "DawnRenderPassDepthStencilAttachmentDescriptor"), sDawnRenderPassDepthStencilAttachmentDescriptor);
  Napi::Object sDawnRenderPassDescriptor = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnRenderPassDescriptor, colorAttachmentCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnRenderPassDescriptor::colorAttachmentCount)));
    sDawnRenderPassDescriptor.Set(Napi::String::New(env, "colorAttachmentCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnRenderPassDescriptor, colorAttachments)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnRenderPassDescriptor::colorAttachments)));
    sDawnRenderPassDescriptor.Set(Napi::String::New(env, "colorAttachments"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnRenderPassDescriptor, depthStencilAttachment)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnRenderPassDescriptor::depthStencilAttachment)));
    sDawnRenderPassDescriptor.Set(Napi::String::New(env, "depthStencilAttachment"), obj);
  }
  sDawnRenderPassDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(DawnRenderPassDescriptor)));
  out.Set(Napi::String::New(env, "DawnRenderPassDescriptor"), sDawnRenderPassDescriptor);
  Napi::Object sDawnRenderPipelineDescriptor = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnRenderPipelineDescriptor, layout)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnRenderPipelineDescriptor::layout)));
    sDawnRenderPipelineDescriptor.Set(Napi::String::New(env, "layout"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnRenderPipelineDescriptor, vertexStage)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnRenderPipelineDescriptor::vertexStage)));
    sDawnRenderPipelineDescriptor.Set(Napi::String::New(env, "vertexStage"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnRenderPipelineDescriptor, fragmentStage)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnRenderPipelineDescriptor::fragmentStage)));
    sDawnRenderPipelineDescriptor.Set(Napi::String::New(env, "fragmentStage"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnRenderPipelineDescriptor, vertexInput)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnRenderPipelineDescriptor::vertexInput)));
    sDawnRenderPipelineDescriptor.Set(Napi::String::New(env, "vertexInput"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnRenderPipelineDescriptor, primitiveTopology)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnRenderPipelineDescriptor::primitiveTopology)));
    sDawnRenderPipelineDescriptor.Set(Napi::String::New(env, "primitiveTopology"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnRenderPipelineDescriptor, rasterizationState)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnRenderPipelineDescriptor::rasterizationState)));
    sDawnRenderPipelineDescriptor.Set(Napi::String::New(env, "rasterizationState"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnRenderPipelineDescriptor, sampleCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnRenderPipelineDescriptor::sampleCount)));
    sDawnRenderPipelineDescriptor.Set(Napi::String::New(env, "sampleCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnRenderPipelineDescriptor, depthStencilState)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnRenderPipelineDescriptor::depthStencilState)));
    sDawnRenderPipelineDescriptor.Set(Napi::String::New(env, "depthStencilState"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnRenderPipelineDescriptor, colorStateCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnRenderPipelineDescriptor::colorStateCount)));
    sDawnRenderPipelineDescriptor.Set(Napi::String::New(env, "colorStateCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnRenderPipelineDescriptor, colorStates)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnRenderPipelineDescriptor::colorStates)));
    sDawnRenderPipelineDescriptor.Set(Napi::String::New(env, "colorStates"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnRenderPipelineDescriptor, sampleMask)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnRenderPipelineDescriptor::sampleMask)));
    sDawnRenderPipelineDescriptor.Set(Napi::String::New(env, "sampleMask"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnRenderPipelineDescriptor, alphaToCoverageEnabled)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnRenderPipelineDescriptor::alphaToCoverageEnabled)));
    sDawnRenderPipelineDescriptor.Set(Napi::String::New(env, "alphaToCoverageEnabled"), obj);
  }
  sDawnRenderPipelineDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(DawnRenderPipelineDescriptor)));
  out.Set(Napi::String::New(env, "DawnRenderPipelineDescriptor"), sDawnRenderPipelineDescriptor);
  Napi::Object sDawnSamplerDescriptor = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnSamplerDescriptor, addressModeU)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnSamplerDescriptor::addressModeU)));
    sDawnSamplerDescriptor.Set(Napi::String::New(env, "addressModeU"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnSamplerDescriptor, addressModeV)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnSamplerDescriptor::addressModeV)));
    sDawnSamplerDescriptor.Set(Napi::String::New(env, "addressModeV"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnSamplerDescriptor, addressModeW)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnSamplerDescriptor::addressModeW)));
    sDawnSamplerDescriptor.Set(Napi::String::New(env, "addressModeW"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnSamplerDescriptor, magFilter)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnSamplerDescriptor::magFilter)));
    sDawnSamplerDescriptor.Set(Napi::String::New(env, "magFilter"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnSamplerDescriptor, minFilter)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnSamplerDescriptor::minFilter)));
    sDawnSamplerDescriptor.Set(Napi::String::New(env, "minFilter"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnSamplerDescriptor, mipmapFilter)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnSamplerDescriptor::mipmapFilter)));
    sDawnSamplerDescriptor.Set(Napi::String::New(env, "mipmapFilter"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnSamplerDescriptor, lodMinClamp)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnSamplerDescriptor::lodMinClamp)));
    sDawnSamplerDescriptor.Set(Napi::String::New(env, "lodMinClamp"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnSamplerDescriptor, lodMaxClamp)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnSamplerDescriptor::lodMaxClamp)));
    sDawnSamplerDescriptor.Set(Napi::String::New(env, "lodMaxClamp"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnSamplerDescriptor, compare)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnSamplerDescriptor::compare)));
    sDawnSamplerDescriptor.Set(Napi::String::New(env, "compare"), obj);
  }
  sDawnSamplerDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(DawnSamplerDescriptor)));
  out.Set(Napi::String::New(env, "DawnSamplerDescriptor"), sDawnSamplerDescriptor);
  Napi::Object sDawnShaderModuleDescriptor = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnShaderModuleDescriptor, codeSize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnShaderModuleDescriptor::codeSize)));
    sDawnShaderModuleDescriptor.Set(Napi::String::New(env, "codeSize"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnShaderModuleDescriptor, code)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnShaderModuleDescriptor::code)));
    sDawnShaderModuleDescriptor.Set(Napi::String::New(env, "code"), obj);
  }
  sDawnShaderModuleDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(DawnShaderModuleDescriptor)));
  out.Set(Napi::String::New(env, "DawnShaderModuleDescriptor"), sDawnShaderModuleDescriptor);
  Napi::Object sDawnStencilStateFaceDescriptor = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnStencilStateFaceDescriptor, compare)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnStencilStateFaceDescriptor::compare)));
    sDawnStencilStateFaceDescriptor.Set(Napi::String::New(env, "compare"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnStencilStateFaceDescriptor, failOp)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnStencilStateFaceDescriptor::failOp)));
    sDawnStencilStateFaceDescriptor.Set(Napi::String::New(env, "failOp"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnStencilStateFaceDescriptor, depthFailOp)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnStencilStateFaceDescriptor::depthFailOp)));
    sDawnStencilStateFaceDescriptor.Set(Napi::String::New(env, "depthFailOp"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnStencilStateFaceDescriptor, passOp)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnStencilStateFaceDescriptor::passOp)));
    sDawnStencilStateFaceDescriptor.Set(Napi::String::New(env, "passOp"), obj);
  }
  sDawnStencilStateFaceDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(DawnStencilStateFaceDescriptor)));
  out.Set(Napi::String::New(env, "DawnStencilStateFaceDescriptor"), sDawnStencilStateFaceDescriptor);
  Napi::Object sDawnSwapChainDescriptor = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnSwapChainDescriptor, implementation)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnSwapChainDescriptor::implementation)));
    sDawnSwapChainDescriptor.Set(Napi::String::New(env, "implementation"), obj);
  }
  sDawnSwapChainDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(DawnSwapChainDescriptor)));
  out.Set(Napi::String::New(env, "DawnSwapChainDescriptor"), sDawnSwapChainDescriptor);
  Napi::Object sDawnTextureCopyView = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnTextureCopyView, texture)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnTextureCopyView::texture)));
    sDawnTextureCopyView.Set(Napi::String::New(env, "texture"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnTextureCopyView, mipLevel)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnTextureCopyView::mipLevel)));
    sDawnTextureCopyView.Set(Napi::String::New(env, "mipLevel"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnTextureCopyView, arrayLayer)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnTextureCopyView::arrayLayer)));
    sDawnTextureCopyView.Set(Napi::String::New(env, "arrayLayer"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnTextureCopyView, origin)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnTextureCopyView::origin)));
    sDawnTextureCopyView.Set(Napi::String::New(env, "origin"), obj);
  }
  sDawnTextureCopyView.Set(strByteLength, Napi::Number::New(env, sizeof(DawnTextureCopyView)));
  out.Set(Napi::String::New(env, "DawnTextureCopyView"), sDawnTextureCopyView);
  Napi::Object sDawnTextureDescriptor = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnTextureDescriptor, usage)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnTextureDescriptor::usage)));
    sDawnTextureDescriptor.Set(Napi::String::New(env, "usage"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnTextureDescriptor, dimension)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnTextureDescriptor::dimension)));
    sDawnTextureDescriptor.Set(Napi::String::New(env, "dimension"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnTextureDescriptor, size)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnTextureDescriptor::size)));
    sDawnTextureDescriptor.Set(Napi::String::New(env, "size"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnTextureDescriptor, arrayLayerCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnTextureDescriptor::arrayLayerCount)));
    sDawnTextureDescriptor.Set(Napi::String::New(env, "arrayLayerCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnTextureDescriptor, format)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnTextureDescriptor::format)));
    sDawnTextureDescriptor.Set(Napi::String::New(env, "format"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnTextureDescriptor, mipLevelCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnTextureDescriptor::mipLevelCount)));
    sDawnTextureDescriptor.Set(Napi::String::New(env, "mipLevelCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnTextureDescriptor, sampleCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnTextureDescriptor::sampleCount)));
    sDawnTextureDescriptor.Set(Napi::String::New(env, "sampleCount"), obj);
  }
  sDawnTextureDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(DawnTextureDescriptor)));
  out.Set(Napi::String::New(env, "DawnTextureDescriptor"), sDawnTextureDescriptor);
  Napi::Object sDawnTextureViewDescriptor = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnTextureViewDescriptor, format)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnTextureViewDescriptor::format)));
    sDawnTextureViewDescriptor.Set(Napi::String::New(env, "format"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnTextureViewDescriptor, dimension)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnTextureViewDescriptor::dimension)));
    sDawnTextureViewDescriptor.Set(Napi::String::New(env, "dimension"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnTextureViewDescriptor, baseMipLevel)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnTextureViewDescriptor::baseMipLevel)));
    sDawnTextureViewDescriptor.Set(Napi::String::New(env, "baseMipLevel"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnTextureViewDescriptor, mipLevelCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnTextureViewDescriptor::mipLevelCount)));
    sDawnTextureViewDescriptor.Set(Napi::String::New(env, "mipLevelCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnTextureViewDescriptor, baseArrayLayer)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnTextureViewDescriptor::baseArrayLayer)));
    sDawnTextureViewDescriptor.Set(Napi::String::New(env, "baseArrayLayer"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnTextureViewDescriptor, arrayLayerCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnTextureViewDescriptor::arrayLayerCount)));
    sDawnTextureViewDescriptor.Set(Napi::String::New(env, "arrayLayerCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(DawnTextureViewDescriptor, aspect)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(DawnTextureViewDescriptor::aspect)));
    sDawnTextureViewDescriptor.Set(Napi::String::New(env, "aspect"), obj);
  }
  sDawnTextureViewDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(DawnTextureViewDescriptor)));
  out.Set(Napi::String::New(env, "DawnTextureViewDescriptor"), sDawnTextureViewDescriptor);
  

  return out;
}
