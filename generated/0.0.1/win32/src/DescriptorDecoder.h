/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY nwgpu v0.0.1
 */
#ifndef __DESCRIPTOR_DECODER_H__
#define __DESCRIPTOR_DECODER_H__

#include "Base.h"
#include "Utils.h"

#include "GPUDevice.h"
#include "GPUAdapter.h"
#include "GPUQueue.h"
#include "GPUFence.h"
#include "GPUBuffer.h"
#include "GPUTexture.h"
#include "GPUTextureView.h"
#include "GPUSampler.h"
#include "GPUBindGroupLayout.h"
#include "GPUPipelineLayout.h"
#include "GPUBindGroup.h"
#include "GPUShaderModule.h"
#include "GPURenderPipeline.h"

#include <unordered_map>


static std::unordered_map<std::string, uint32_t> GPUAddressMode = {
  { "repeat", 0 },
  { "mirror repeat", 1 },
  { "clamp to edge", 2 },
};

static std::unordered_map<std::string, uint32_t> GPUBindingType = {
  { "uniform buffer", 0 },
  { "storage buffer", 1 },
  { "readonly storage buffer", 2 },
  { "sampler", 3 },
  { "sampled texture", 4 },
  { "storage texture", 5 },
};

static std::unordered_map<std::string, uint32_t> GPUBlendFactor = {
  { "zero", 0 },
  { "one", 1 },
  { "src color", 2 },
  { "one minus src color", 3 },
  { "src alpha", 4 },
  { "one minus src alpha", 5 },
  { "dst color", 6 },
  { "one minus dst color", 7 },
  { "dst alpha", 8 },
  { "one minus dst alpha", 9 },
  { "src alpha saturated", 10 },
  { "blend color", 11 },
  { "one minus blend color", 12 },
};

static std::unordered_map<std::string, uint32_t> GPUBlendOperation = {
  { "add", 0 },
  { "subtract", 1 },
  { "reverse subtract", 2 },
  { "min", 3 },
  { "max", 4 },
};

static std::unordered_map<std::string, uint32_t> GPUBufferMapAsyncStatus = {
  { "success", 0 },
  { "error", 1 },
  { "unknown", 2 },
  { "device lost", 3 },
};

static std::unordered_map<std::string, uint32_t> GPUCompareFunction = {
  { "never", 0 },
  { "less", 1 },
  { "less equal", 2 },
  { "greater", 3 },
  { "greater equal", 4 },
  { "equal", 5 },
  { "not equal", 6 },
  { "always", 7 },
};

static std::unordered_map<std::string, uint32_t> GPUCullMode = {
  { "none", 0 },
  { "front", 1 },
  { "back", 2 },
};

static std::unordered_map<std::string, uint32_t> GPUErrorFilter = {
  { "none", 0 },
  { "validation", 1 },
  { "out of memory", 2 },
};

static std::unordered_map<std::string, uint32_t> GPUErrorType = {
  { "no error", 0 },
  { "validation", 1 },
  { "out of memory", 2 },
  { "unknown", 3 },
  { "device lost", 4 },
};

static std::unordered_map<std::string, uint32_t> GPUFenceCompletionStatus = {
  { "success", 0 },
  { "error", 1 },
  { "unknown", 2 },
  { "device lost", 3 },
};

static std::unordered_map<std::string, uint32_t> GPUFilterMode = {
  { "nearest", 0 },
  { "linear", 1 },
};

static std::unordered_map<std::string, uint32_t> GPUFrontFace = {
  { "CCW", 0 },
  { "CW", 1 },
};

static std::unordered_map<std::string, uint32_t> GPUIndexFormat = {
  { "uint16", 0 },
  { "uint32", 1 },
};

static std::unordered_map<std::string, uint32_t> GPUInputStepMode = {
  { "vertex", 0 },
  { "instance", 1 },
};

static std::unordered_map<std::string, uint32_t> GPULoadOp = {
  { "clear", 0 },
  { "load", 1 },
};

static std::unordered_map<std::string, uint32_t> GPUStoreOp = {
  { "store", 0 },
};

static std::unordered_map<std::string, uint32_t> GPUPrimitiveTopology = {
  { "point list", 0 },
  { "line list", 1 },
  { "line strip", 2 },
  { "triangle list", 3 },
  { "triangle strip", 4 },
};

static std::unordered_map<std::string, uint32_t> GPUStencilOperation = {
  { "keep", 0 },
  { "zero", 1 },
  { "replace", 2 },
  { "invert", 3 },
  { "increment clamp", 4 },
  { "decrement clamp", 5 },
  { "increment wrap", 6 },
  { "decrement wrap", 7 },
};

static std::unordered_map<std::string, uint32_t> GPUTextureAspect = {
  { "all", 0 },
  { "stencil only", 1 },
  { "depth only", 2 },
};

static std::unordered_map<std::string, uint32_t> GPUTextureComponentType = {
  { "float", 0 },
  { "sint", 1 },
  { "uint", 2 },
};

static std::unordered_map<std::string, uint32_t> GPUTextureDimension = {
  { "1D", 0 },
  { "2D", 1 },
  { "3D", 2 },
};

static std::unordered_map<std::string, uint32_t> GPUTextureFormat = {
  { "undefined", 0 },
  { "R8 unorm", 1 },
  { "R8 snorm", 2 },
  { "R8 uint", 3 },
  { "R8 sint", 4 },
  { "R16 uint", 5 },
  { "R16 sint", 6 },
  { "R16 float", 7 },
  { "RG8 unorm", 8 },
  { "RG8 snorm", 9 },
  { "RG8 uint", 10 },
  { "RG8 sint", 11 },
  { "R32 float", 12 },
  { "R32 uint", 13 },
  { "R32 sint", 14 },
  { "RG16 uint", 15 },
  { "RG16 sint", 16 },
  { "RG16 float", 17 },
  { "RGBA8 unorm", 18 },
  { "RGBA8 unorm srgb", 19 },
  { "RGBA8 snorm", 20 },
  { "RGBA8 uint", 21 },
  { "RGBA8 sint", 22 },
  { "BGRA8 unorm", 23 },
  { "BGRA8 unorm srgb", 24 },
  { "RGB10 A2 unorm", 25 },
  { "RG11 B10 float", 26 },
  { "RG32 float", 27 },
  { "RG32 uint", 28 },
  { "RG32 sint", 29 },
  { "RGBA16 uint", 30 },
  { "RGBA16 sint", 31 },
  { "RGBA16 float", 32 },
  { "RGBA32 float", 33 },
  { "RGBA32 uint", 34 },
  { "RGBA32 sint", 35 },
  { "depth32 float", 36 },
  { "depth24 plus", 37 },
  { "depth24 plus stencil8", 38 },
  { "BC1 RGBA unorm", 39 },
  { "BC1 RGBA unorm srgb", 40 },
  { "BC2 RGBA unorm", 41 },
  { "BC2 RGBA unorm srgb", 42 },
  { "BC3 RGBA unorm", 43 },
  { "BC3 RGBA unorm srgb", 44 },
  { "BC4 R unorm", 45 },
  { "BC4 R snorm", 46 },
  { "BC5 RG unorm", 47 },
  { "BC5 RG snorm", 48 },
  { "BC6H RGB ufloat", 49 },
  { "BC6H RGB sfloat", 50 },
  { "BC7 RGBA unorm", 51 },
  { "BC7 RGBA unorm srgb", 52 },
};

static std::unordered_map<std::string, uint32_t> GPUTextureViewDimension = {
  { "undefined", 0 },
  { "1D", 1 },
  { "2D", 2 },
  { "2D array", 3 },
  { "cube", 4 },
  { "cube array", 5 },
  { "3D", 6 },
};

static std::unordered_map<std::string, uint32_t> GPUVertexFormat = {
  { "uChar2", 0 },
  { "uChar4", 1 },
  { "char2", 2 },
  { "char4", 3 },
  { "uChar2 norm", 4 },
  { "uChar4 norm", 5 },
  { "char2 norm", 6 },
  { "char4 norm", 7 },
  { "uShort2", 8 },
  { "uShort4", 9 },
  { "short2", 10 },
  { "short4", 11 },
  { "uShort2 norm", 12 },
  { "uShort4 norm", 13 },
  { "short2 norm", 14 },
  { "short4 norm", 15 },
  { "half2", 16 },
  { "half4", 17 },
  { "float", 18 },
  { "float2", 19 },
  { "float3", 20 },
  { "float4", 21 },
  { "uInt", 22 },
  { "uInt2", 23 },
  { "uInt3", 24 },
  { "uInt4", 25 },
  { "int", 26 },
  { "int2", 27 },
  { "int3", 28 },
  { "int4", 29 },
};


namespace DescriptorDecoder {
  
  DawnBindGroupBinding GPUBindGroupBinding(Napi::Value& value) {

    DawnBindGroupBinding descriptor = DawnBindGroupBinding;
    descriptor.offset = 0;
    {
      descriptor.binding = obj.Get("binding").As<Napi::Number>().Uint32Value();
    }
    {
    }
    if (obj.Has("offset")) {
      bool lossless;
      descriptor.offset = obj.Get("offset").As<Napi::BigInt>().Uint64Value(&lossless);
    }
    {
      bool lossless;
      descriptor.size = obj.Get("size").As<Napi::BigInt>().Uint64Value(&lossless);
    }
    {
    }
    {
    }

    return descriptor;
  };
  
  DawnBindGroupDescriptor GPUBindGroupDescriptor(Napi::Value& value, void* nextInChain = nullptr) {

    DawnBindGroupDescriptor descriptor = DawnBindGroupDescriptor;
    descriptor.nextInChain = nullptr;
    {
    }
    {
      descriptor.bindingCount = obj.Get("bindingCount").As<Napi::Number>().Uint32Value();
    }
    {
    }

    return descriptor;
  };
  
  DawnBindGroupLayoutBinding GPUBindGroupLayoutBinding(Napi::Value& value) {

    DawnBindGroupLayoutBinding descriptor = DawnBindGroupLayoutBinding;
    descriptor.dynamic = false;
    descriptor.multisampled = false;
    descriptor.textureComponentType = 0;
    {
      descriptor.binding = obj.Get("binding").As<Napi::Number>().Uint32Value();
    }
    {
      descriptor.visibility = static_cast<DawnShaderStage>(obj.Get("visibility").As<Napi::Number>().Uint32Value());
    }
    {
      descriptor.type = static_cast<DawnBindingType>(GPUBindingType[obj.Get("type").As<Napi::String>().Utf8Value()]);
    }
    if (obj.Has("dynamic")) {
      descriptor.dynamic = obj.Get("dynamic").As<Napi::Boolean>().Value();
    }
    if (obj.Has("multisampled")) {
      descriptor.multisampled = obj.Get("multisampled").As<Napi::Boolean>().Value();
    }
    if (obj.Has("textureDimension")) {
      descriptor.textureDimension = static_cast<DawnTextureViewDimension>(GPUTextureViewDimension[obj.Get("textureDimension").As<Napi::String>().Utf8Value()]);
    }
    if (obj.Has("textureComponentType")) {
      descriptor.textureComponentType = static_cast<DawnTextureComponentType>(GPUTextureComponentType[obj.Get("textureComponentType").As<Napi::String>().Utf8Value()]);
    }

    return descriptor;
  };
  
  DawnBindGroupLayoutDescriptor GPUBindGroupLayoutDescriptor(Napi::Value& value, void* nextInChain = nullptr) {

    DawnBindGroupLayoutDescriptor descriptor = DawnBindGroupLayoutDescriptor;
    descriptor.nextInChain = nullptr;
    {
      descriptor.bindingCount = obj.Get("bindingCount").As<Napi::Number>().Uint32Value();
    }
    {
    }

    return descriptor;
  };
  
  DawnBlendDescriptor GPUBlendDescriptor(Napi::Value& value) {

    DawnBlendDescriptor descriptor = DawnBlendDescriptor;
    descriptor.operation = 0;
    descriptor.srcFactor = 1;
    descriptor.dstFactor = 0;
    if (obj.Has("operation")) {
      descriptor.operation = static_cast<DawnBlendOperation>(GPUBlendOperation[obj.Get("operation").As<Napi::String>().Utf8Value()]);
    }
    if (obj.Has("srcFactor")) {
      descriptor.srcFactor = static_cast<DawnBlendFactor>(GPUBlendFactor[obj.Get("srcFactor").As<Napi::String>().Utf8Value()]);
    }
    if (obj.Has("dstFactor")) {
      descriptor.dstFactor = static_cast<DawnBlendFactor>(GPUBlendFactor[obj.Get("dstFactor").As<Napi::String>().Utf8Value()]);
    }

    return descriptor;
  };
  
  DawnColorStateDescriptor GPUColorStateDescriptor(Napi::Value& value, void* nextInChain = nullptr) {

    DawnColorStateDescriptor descriptor = DawnColorStateDescriptor;
    descriptor.nextInChain = nullptr;
    descriptor.writeMask = 15;
    {
      descriptor.format = static_cast<DawnTextureFormat>(GPUTextureFormat[obj.Get("format").As<Napi::String>().Utf8Value()]);
    }
    {
    }
    {
    }
    if (obj.Has("writeMask")) {
      descriptor.writeMask = static_cast<DawnColorWriteMask>(obj.Get("writeMask").As<Napi::Number>().Uint32Value());
    }

    return descriptor;
  };
  
  DawnBufferCopyView GPUBufferCopyView(Napi::Value& value, void* nextInChain = nullptr) {

    DawnBufferCopyView descriptor = DawnBufferCopyView;
    descriptor.nextInChain = nullptr;
    descriptor.offset = 0;
    {
    }
    if (obj.Has("offset")) {
      bool lossless;
      descriptor.offset = obj.Get("offset").As<Napi::BigInt>().Uint64Value(&lossless);
    }
    {
      descriptor.rowPitch = obj.Get("rowPitch").As<Napi::Number>().Uint32Value();
    }
    {
      descriptor.imageHeight = obj.Get("imageHeight").As<Napi::Number>().Uint32Value();
    }

    return descriptor;
  };
  
  DawnBufferDescriptor GPUBufferDescriptor(Napi::Value& value, void* nextInChain = nullptr) {

    DawnBufferDescriptor descriptor = DawnBufferDescriptor;
    descriptor.nextInChain = nullptr;
    {
      descriptor.usage = static_cast<DawnBufferUsage>(obj.Get("usage").As<Napi::Number>().Uint32Value());
    }
    {
      bool lossless;
      descriptor.size = obj.Get("size").As<Napi::BigInt>().Uint64Value(&lossless);
    }

    return descriptor;
  };
  
  DawnCreateBufferMappedResult GPUCreateBufferMappedResult(Napi::Value& value) {

    DawnCreateBufferMappedResult descriptor = DawnCreateBufferMappedResult;
    {
    }
    {
      bool lossless;
      descriptor.dataLength = obj.Get("dataLength").As<Napi::BigInt>().Uint64Value(&lossless);
    }
    {
    }

    return descriptor;
  };
  
  DawnColor GPUColor(Napi::Value& value) {

    DawnColor descriptor = DawnColor;
    {
      descriptor.r = obj.Get("r").As<Napi::Number>().FloatValue();
    }
    {
      descriptor.g = obj.Get("g").As<Napi::Number>().FloatValue();
    }
    {
      descriptor.b = obj.Get("b").As<Napi::Number>().FloatValue();
    }
    {
      descriptor.a = obj.Get("a").As<Napi::Number>().FloatValue();
    }

    return descriptor;
  };
  
  DawnCommandBufferDescriptor GPUCommandBufferDescriptor(Napi::Value& value, void* nextInChain = nullptr) {

    DawnCommandBufferDescriptor descriptor = DawnCommandBufferDescriptor;
    descriptor.nextInChain = nullptr;

    return descriptor;
  };
  
  DawnCommandEncoderDescriptor GPUCommandEncoderDescriptor(Napi::Value& value, void* nextInChain = nullptr) {

    DawnCommandEncoderDescriptor descriptor = DawnCommandEncoderDescriptor;
    descriptor.nextInChain = nullptr;

    return descriptor;
  };
  
  DawnComputePassDescriptor GPUComputePassDescriptor(Napi::Value& value, void* nextInChain = nullptr) {

    DawnComputePassDescriptor descriptor = DawnComputePassDescriptor;
    descriptor.nextInChain = nullptr;

    return descriptor;
  };
  
  DawnComputePipelineDescriptor GPUComputePipelineDescriptor(Napi::Value& value, void* nextInChain = nullptr) {

    DawnComputePipelineDescriptor descriptor = DawnComputePipelineDescriptor;
    descriptor.nextInChain = nullptr;
    {
    }
    {
    }

    return descriptor;
  };
  
  DawnDepthStencilStateDescriptor GPUDepthStencilStateDescriptor(Napi::Value& value, void* nextInChain = nullptr) {

    DawnDepthStencilStateDescriptor descriptor = DawnDepthStencilStateDescriptor;
    descriptor.nextInChain = nullptr;
    descriptor.depthWriteEnabled = false;
    descriptor.depthCompare = 7;
    descriptor.stencilReadMask = 0xFFFFFFFF;
    descriptor.stencilWriteMask = 0xFFFFFFFF;
    {
      descriptor.format = static_cast<DawnTextureFormat>(GPUTextureFormat[obj.Get("format").As<Napi::String>().Utf8Value()]);
    }
    if (obj.Has("depthWriteEnabled")) {
      descriptor.depthWriteEnabled = obj.Get("depthWriteEnabled").As<Napi::Boolean>().Value();
    }
    if (obj.Has("depthCompare")) {
      descriptor.depthCompare = static_cast<DawnCompareFunction>(GPUCompareFunction[obj.Get("depthCompare").As<Napi::String>().Utf8Value()]);
    }
    {
    }
    {
    }
    if (obj.Has("stencilReadMask")) {
      descriptor.stencilReadMask = obj.Get("stencilReadMask").As<Napi::Number>().Uint32Value();
    }
    if (obj.Has("stencilWriteMask")) {
      descriptor.stencilWriteMask = obj.Get("stencilWriteMask").As<Napi::Number>().Uint32Value();
    }

    return descriptor;
  };
  
  DawnExtent3D GPUExtent3D(Napi::Value& value) {

    DawnExtent3D descriptor = DawnExtent3D;
    {
      descriptor.width = obj.Get("width").As<Napi::Number>().Uint32Value();
    }
    {
      descriptor.height = obj.Get("height").As<Napi::Number>().Uint32Value();
    }
    {
      descriptor.depth = obj.Get("depth").As<Napi::Number>().Uint32Value();
    }

    return descriptor;
  };
  
  DawnFenceDescriptor GPUFenceDescriptor(Napi::Value& value, void* nextInChain = nullptr) {

    DawnFenceDescriptor descriptor = DawnFenceDescriptor;
    descriptor.nextInChain = nullptr;
    descriptor.initialValue = 0;
    if (obj.Has("initialValue")) {
      bool lossless;
      descriptor.initialValue = obj.Get("initialValue").As<Napi::BigInt>().Uint64Value(&lossless);
    }

    return descriptor;
  };
  
  DawnVertexAttributeDescriptor GPUVertexAttributeDescriptor(Napi::Value& value) {

    DawnVertexAttributeDescriptor descriptor = DawnVertexAttributeDescriptor;
    descriptor.offset = 0;
    {
      descriptor.shaderLocation = obj.Get("shaderLocation").As<Napi::Number>().Uint32Value();
    }
    if (obj.Has("offset")) {
      bool lossless;
      descriptor.offset = obj.Get("offset").As<Napi::BigInt>().Uint64Value(&lossless);
    }
    {
      descriptor.format = static_cast<DawnVertexFormat>(GPUVertexFormat[obj.Get("format").As<Napi::String>().Utf8Value()]);
    }

    return descriptor;
  };
  
  DawnVertexBufferDescriptor GPUVertexBufferDescriptor(Napi::Value& value) {

    DawnVertexBufferDescriptor descriptor = DawnVertexBufferDescriptor;
    descriptor.stepMode = 0;
    {
      bool lossless;
      descriptor.stride = obj.Get("stride").As<Napi::BigInt>().Uint64Value(&lossless);
    }
    if (obj.Has("stepMode")) {
      descriptor.stepMode = static_cast<DawnInputStepMode>(GPUInputStepMode[obj.Get("stepMode").As<Napi::String>().Utf8Value()]);
    }
    {
      descriptor.attributeCount = obj.Get("attributeCount").As<Napi::Number>().Uint32Value();
    }
    {
    }

    return descriptor;
  };
  
  DawnVertexInputDescriptor GPUVertexInputDescriptor(Napi::Value& value, void* nextInChain = nullptr) {

    DawnVertexInputDescriptor descriptor = DawnVertexInputDescriptor;
    descriptor.nextInChain = nullptr;
    descriptor.indexFormat = 1;
    descriptor.bufferCount = 0;
    if (obj.Has("indexFormat")) {
      descriptor.indexFormat = static_cast<DawnIndexFormat>(GPUIndexFormat[obj.Get("indexFormat").As<Napi::String>().Utf8Value()]);
    }
    if (obj.Has("bufferCount")) {
      descriptor.bufferCount = obj.Get("bufferCount").As<Napi::Number>().Uint32Value();
    }
    {
    }

    return descriptor;
  };
  
  DawnOrigin3D GPUOrigin3D(Napi::Value& value) {

    DawnOrigin3D descriptor = DawnOrigin3D;
    descriptor.x = 0;
    descriptor.y = 0;
    descriptor.z = 0;
    if (obj.Has("x")) {
      descriptor.x = obj.Get("x").As<Napi::Number>().Uint32Value();
    }
    if (obj.Has("y")) {
      descriptor.y = obj.Get("y").As<Napi::Number>().Uint32Value();
    }
    if (obj.Has("z")) {
      descriptor.z = obj.Get("z").As<Napi::Number>().Uint32Value();
    }

    return descriptor;
  };
  
  DawnPipelineLayoutDescriptor GPUPipelineLayoutDescriptor(Napi::Value& value, void* nextInChain = nullptr) {

    DawnPipelineLayoutDescriptor descriptor = DawnPipelineLayoutDescriptor;
    descriptor.nextInChain = nullptr;
    {
      descriptor.bindGroupLayoutCount = obj.Get("bindGroupLayoutCount").As<Napi::Number>().Uint32Value();
    }
    {
    }

    return descriptor;
  };
  
  DawnPipelineStageDescriptor GPUPipelineStageDescriptor(Napi::Value& value, void* nextInChain = nullptr) {

    DawnPipelineStageDescriptor descriptor = DawnPipelineStageDescriptor;
    descriptor.nextInChain = nullptr;
    {
    }
    {
      descriptor.entryPoint = getNAPIStringCopy(obj.Get("entryPoint"));
    }

    return descriptor;
  };
  
  DawnRasterizationStateDescriptor GPURasterizationStateDescriptor(Napi::Value& value, void* nextInChain = nullptr) {

    DawnRasterizationStateDescriptor descriptor = DawnRasterizationStateDescriptor;
    descriptor.nextInChain = nullptr;
    descriptor.frontFace = 0;
    descriptor.cullMode = 0;
    descriptor.depthBias = 0;
    descriptor.depthBiasSlopeScale = 0.0f;
    descriptor.depthBiasClamp = 0.0f;
    if (obj.Has("frontFace")) {
      descriptor.frontFace = static_cast<DawnFrontFace>(GPUFrontFace[obj.Get("frontFace").As<Napi::String>().Utf8Value()]);
    }
    if (obj.Has("cullMode")) {
      descriptor.cullMode = static_cast<DawnCullMode>(GPUCullMode[obj.Get("cullMode").As<Napi::String>().Utf8Value()]);
    }
    if (obj.Has("depthBias")) {
      descriptor.depthBias = obj.Get("depthBias").As<Napi::Number>().Int32Value();
    }
    if (obj.Has("depthBiasSlopeScale")) {
      descriptor.depthBiasSlopeScale = obj.Get("depthBiasSlopeScale").As<Napi::Number>().FloatValue();
    }
    if (obj.Has("depthBiasClamp")) {
      descriptor.depthBiasClamp = obj.Get("depthBiasClamp").As<Napi::Number>().FloatValue();
    }

    return descriptor;
  };
  
  DawnRenderBundleDescriptor GPURenderBundleDescriptor(Napi::Value& value, void* nextInChain = nullptr) {

    DawnRenderBundleDescriptor descriptor = DawnRenderBundleDescriptor;
    descriptor.nextInChain = nullptr;

    return descriptor;
  };
  
  DawnRenderBundleEncoderDescriptor GPURenderBundleEncoderDescriptor(Napi::Value& value, void* nextInChain = nullptr) {

    DawnRenderBundleEncoderDescriptor descriptor = DawnRenderBundleEncoderDescriptor;
    descriptor.nextInChain = nullptr;
    descriptor.sampleCount = 1;
    {
      descriptor.colorFormatsCount = obj.Get("colorFormatsCount").As<Napi::Number>().Uint32Value();
    }
    {
      descriptor.colorFormats = static_cast<DawnTextureFormat>(GPUTextureFormat[obj.Get("colorFormats").As<Napi::String>().Utf8Value()]);
    }
    if (obj.Has("depthStencilFormat")) {
      descriptor.depthStencilFormat = static_cast<DawnTextureFormat>(GPUTextureFormat[obj.Get("depthStencilFormat").As<Napi::String>().Utf8Value()]);
    }
    if (obj.Has("sampleCount")) {
      descriptor.sampleCount = obj.Get("sampleCount").As<Napi::Number>().Uint32Value();
    }

    return descriptor;
  };
  
  DawnRenderPassColorAttachmentDescriptor GPURenderPassColorAttachmentDescriptor(Napi::Value& value) {

    DawnRenderPassColorAttachmentDescriptor descriptor = DawnRenderPassColorAttachmentDescriptor;
    {
    }
    {
    }
    {
      descriptor.loadOp = static_cast<DawnLoadOp>(GPULoadOp[obj.Get("loadOp").As<Napi::String>().Utf8Value()]);
    }
    {
      descriptor.storeOp = static_cast<DawnStoreOp>(GPUStoreOp[obj.Get("storeOp").As<Napi::String>().Utf8Value()]);
    }
    {
    }

    return descriptor;
  };
  
  DawnRenderPassDepthStencilAttachmentDescriptor GPURenderPassDepthStencilAttachmentDescriptor(Napi::Value& value) {

    DawnRenderPassDepthStencilAttachmentDescriptor descriptor = DawnRenderPassDepthStencilAttachmentDescriptor;
    descriptor.clearStencil = 0;
    {
    }
    {
      descriptor.depthLoadOp = static_cast<DawnLoadOp>(GPULoadOp[obj.Get("depthLoadOp").As<Napi::String>().Utf8Value()]);
    }
    {
      descriptor.depthStoreOp = static_cast<DawnStoreOp>(GPUStoreOp[obj.Get("depthStoreOp").As<Napi::String>().Utf8Value()]);
    }
    {
      descriptor.clearDepth = obj.Get("clearDepth").As<Napi::Number>().FloatValue();
    }
    {
      descriptor.stencilLoadOp = static_cast<DawnLoadOp>(GPULoadOp[obj.Get("stencilLoadOp").As<Napi::String>().Utf8Value()]);
    }
    {
      descriptor.stencilStoreOp = static_cast<DawnStoreOp>(GPUStoreOp[obj.Get("stencilStoreOp").As<Napi::String>().Utf8Value()]);
    }
    if (obj.Has("clearStencil")) {
      descriptor.clearStencil = obj.Get("clearStencil").As<Napi::Number>().Uint32Value();
    }

    return descriptor;
  };
  
  DawnRenderPassDescriptor GPURenderPassDescriptor(Napi::Value& value) {

    DawnRenderPassDescriptor descriptor = DawnRenderPassDescriptor;
    {
      descriptor.colorAttachmentCount = obj.Get("colorAttachmentCount").As<Napi::Number>().Uint32Value();
    }
    {
    }
    {
    }

    return descriptor;
  };
  
  DawnRenderPipelineDescriptor GPURenderPipelineDescriptor(Napi::Value& value, void* nextInChain = nullptr) {

    DawnRenderPipelineDescriptor descriptor = DawnRenderPipelineDescriptor;
    descriptor.nextInChain = nullptr;
    descriptor.sampleCount = 1;
    descriptor.sampleMask = 0xFFFFFFFF;
    descriptor.alphaToCoverageEnabled = false;
    {
    }
    {
    }
    {
    }
    {
    }
    {
      descriptor.primitiveTopology = static_cast<DawnPrimitiveTopology>(GPUPrimitiveTopology[obj.Get("primitiveTopology").As<Napi::String>().Utf8Value()]);
    }
    {
    }
    if (obj.Has("sampleCount")) {
      descriptor.sampleCount = obj.Get("sampleCount").As<Napi::Number>().Uint32Value();
    }
    {
    }
    {
      descriptor.colorStateCount = obj.Get("colorStateCount").As<Napi::Number>().Uint32Value();
    }
    {
    }
    if (obj.Has("sampleMask")) {
      descriptor.sampleMask = obj.Get("sampleMask").As<Napi::Number>().Uint32Value();
    }
    if (obj.Has("alphaToCoverageEnabled")) {
      descriptor.alphaToCoverageEnabled = obj.Get("alphaToCoverageEnabled").As<Napi::Boolean>().Value();
    }

    return descriptor;
  };
  
  DawnSamplerDescriptor GPUSamplerDescriptor(Napi::Value& value, void* nextInChain = nullptr) {

    DawnSamplerDescriptor descriptor = DawnSamplerDescriptor;
    descriptor.nextInChain = nullptr;
    descriptor.addressModeU = 2;
    descriptor.addressModeV = 2;
    descriptor.addressModeW = 2;
    descriptor.magFilter = 0;
    descriptor.minFilter = 0;
    descriptor.mipmapFilter = 0;
    descriptor.lodMinClamp = 0.0f;
    descriptor.lodMaxClamp = 1000.0f;
    descriptor.compare = 0;
    if (obj.Has("addressModeU")) {
      descriptor.addressModeU = static_cast<DawnAddressMode>(GPUAddressMode[obj.Get("addressModeU").As<Napi::String>().Utf8Value()]);
    }
    if (obj.Has("addressModeV")) {
      descriptor.addressModeV = static_cast<DawnAddressMode>(GPUAddressMode[obj.Get("addressModeV").As<Napi::String>().Utf8Value()]);
    }
    if (obj.Has("addressModeW")) {
      descriptor.addressModeW = static_cast<DawnAddressMode>(GPUAddressMode[obj.Get("addressModeW").As<Napi::String>().Utf8Value()]);
    }
    if (obj.Has("magFilter")) {
      descriptor.magFilter = static_cast<DawnFilterMode>(GPUFilterMode[obj.Get("magFilter").As<Napi::String>().Utf8Value()]);
    }
    if (obj.Has("minFilter")) {
      descriptor.minFilter = static_cast<DawnFilterMode>(GPUFilterMode[obj.Get("minFilter").As<Napi::String>().Utf8Value()]);
    }
    if (obj.Has("mipmapFilter")) {
      descriptor.mipmapFilter = static_cast<DawnFilterMode>(GPUFilterMode[obj.Get("mipmapFilter").As<Napi::String>().Utf8Value()]);
    }
    if (obj.Has("lodMinClamp")) {
      descriptor.lodMinClamp = obj.Get("lodMinClamp").As<Napi::Number>().FloatValue();
    }
    if (obj.Has("lodMaxClamp")) {
      descriptor.lodMaxClamp = obj.Get("lodMaxClamp").As<Napi::Number>().FloatValue();
    }
    if (obj.Has("compare")) {
      descriptor.compare = static_cast<DawnCompareFunction>(GPUCompareFunction[obj.Get("compare").As<Napi::String>().Utf8Value()]);
    }

    return descriptor;
  };
  
  DawnShaderModuleDescriptor GPUShaderModuleDescriptor(Napi::Value& value, void* nextInChain = nullptr) {

    DawnShaderModuleDescriptor descriptor = DawnShaderModuleDescriptor;
    descriptor.nextInChain = nullptr;
    {
      descriptor.codeSize = obj.Get("codeSize").As<Napi::Number>().Uint32Value();
    }
    {
    }

    return descriptor;
  };
  
  DawnStencilStateFaceDescriptor GPUStencilStateFaceDescriptor(Napi::Value& value) {

    DawnStencilStateFaceDescriptor descriptor = DawnStencilStateFaceDescriptor;
    descriptor.compare = 7;
    descriptor.failOp = 0;
    descriptor.depthFailOp = 0;
    descriptor.passOp = 0;
    if (obj.Has("compare")) {
      descriptor.compare = static_cast<DawnCompareFunction>(GPUCompareFunction[obj.Get("compare").As<Napi::String>().Utf8Value()]);
    }
    if (obj.Has("failOp")) {
      descriptor.failOp = static_cast<DawnStencilOperation>(GPUStencilOperation[obj.Get("failOp").As<Napi::String>().Utf8Value()]);
    }
    if (obj.Has("depthFailOp")) {
      descriptor.depthFailOp = static_cast<DawnStencilOperation>(GPUStencilOperation[obj.Get("depthFailOp").As<Napi::String>().Utf8Value()]);
    }
    if (obj.Has("passOp")) {
      descriptor.passOp = static_cast<DawnStencilOperation>(GPUStencilOperation[obj.Get("passOp").As<Napi::String>().Utf8Value()]);
    }

    return descriptor;
  };
  
  DawnSwapChainDescriptor GPUSwapChainDescriptor(Napi::Value& value, void* nextInChain = nullptr) {

    DawnSwapChainDescriptor descriptor = DawnSwapChainDescriptor;
    descriptor.nextInChain = nullptr;
    {
      bool lossless;
      descriptor.implementation = obj.Get("implementation").As<Napi::BigInt>().Uint64Value(&lossless);
    }

    return descriptor;
  };
  
  DawnTextureCopyView GPUTextureCopyView(Napi::Value& value, void* nextInChain = nullptr) {

    DawnTextureCopyView descriptor = DawnTextureCopyView;
    descriptor.nextInChain = nullptr;
    descriptor.mipLevel = 0;
    descriptor.arrayLayer = 0;
    {
    }
    if (obj.Has("mipLevel")) {
      descriptor.mipLevel = obj.Get("mipLevel").As<Napi::Number>().Uint32Value();
    }
    if (obj.Has("arrayLayer")) {
      descriptor.arrayLayer = obj.Get("arrayLayer").As<Napi::Number>().Uint32Value();
    }
    {
    }

    return descriptor;
  };
  
  DawnTextureDescriptor GPUTextureDescriptor(Napi::Value& value, void* nextInChain = nullptr) {

    DawnTextureDescriptor descriptor = DawnTextureDescriptor;
    descriptor.nextInChain = nullptr;
    descriptor.dimension = 2D;
    descriptor.arrayLayerCount = 1;
    descriptor.mipLevelCount = 1;
    descriptor.sampleCount = 1;
    {
      descriptor.usage = static_cast<DawnTextureUsage>(obj.Get("usage").As<Napi::Number>().Uint32Value());
    }
    if (obj.Has("dimension")) {
      descriptor.dimension = static_cast<DawnTextureDimension>(GPUTextureDimension[obj.Get("dimension").As<Napi::String>().Utf8Value()]);
    }
    {
    }
    if (obj.Has("arrayLayerCount")) {
      descriptor.arrayLayerCount = obj.Get("arrayLayerCount").As<Napi::Number>().Uint32Value();
    }
    {
      descriptor.format = static_cast<DawnTextureFormat>(GPUTextureFormat[obj.Get("format").As<Napi::String>().Utf8Value()]);
    }
    if (obj.Has("mipLevelCount")) {
      descriptor.mipLevelCount = obj.Get("mipLevelCount").As<Napi::Number>().Uint32Value();
    }
    if (obj.Has("sampleCount")) {
      descriptor.sampleCount = obj.Get("sampleCount").As<Napi::Number>().Uint32Value();
    }

    return descriptor;
  };
  
  DawnTextureViewDescriptor GPUTextureViewDescriptor(Napi::Value& value, void* nextInChain = nullptr) {

    DawnTextureViewDescriptor descriptor = DawnTextureViewDescriptor;
    descriptor.nextInChain = nullptr;
    descriptor.baseMipLevel = 0;
    descriptor.mipLevelCount = 0;
    descriptor.baseArrayLayer = 0;
    descriptor.arrayLayerCount = 0;
    descriptor.aspect = 0;
    if (obj.Has("format")) {
      descriptor.format = static_cast<DawnTextureFormat>(GPUTextureFormat[obj.Get("format").As<Napi::String>().Utf8Value()]);
    }
    if (obj.Has("dimension")) {
      descriptor.dimension = static_cast<DawnTextureViewDimension>(GPUTextureViewDimension[obj.Get("dimension").As<Napi::String>().Utf8Value()]);
    }
    if (obj.Has("baseMipLevel")) {
      descriptor.baseMipLevel = obj.Get("baseMipLevel").As<Napi::Number>().Uint32Value();
    }
    if (obj.Has("mipLevelCount")) {
      descriptor.mipLevelCount = obj.Get("mipLevelCount").As<Napi::Number>().Uint32Value();
    }
    if (obj.Has("baseArrayLayer")) {
      descriptor.baseArrayLayer = obj.Get("baseArrayLayer").As<Napi::Number>().Uint32Value();
    }
    if (obj.Has("arrayLayerCount")) {
      descriptor.arrayLayerCount = obj.Get("arrayLayerCount").As<Napi::Number>().Uint32Value();
    }
    if (obj.Has("aspect")) {
      descriptor.aspect = static_cast<DawnTextureAspect>(GPUTextureAspect[obj.Get("aspect").As<Napi::String>().Utf8Value()]);
    }

    return descriptor;
  };
  
}

#endif
