/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY webgpu v0.0.2
 */
#ifndef __DESCRIPTOR_DECODER_H__
#define __DESCRIPTOR_DECODER_H__

#include "GPUDevice.h"
#include "GPUAdapter.h"
#include "GPUQueue.h"
#include "GPUFence.h"
#include "GPUBuffer.h"
#include "GPUTexture.h"
#include "GPUTextureView.h"
#include "GPUSampler.h"
#include "GPUBindGroupLayout.h"
#include "GPUPipelineLayout.h"
#include "GPUBindGroup.h"
#include "GPUShaderModule.h"
#include "GPURenderPipeline.h"

#include <unordered_map>

namespace DescriptorDecoder {
  
  uint32_t GPUAddressMode(std::string name);
  std::string GPUAddressMode(uint32_t value);
  
  uint32_t GPUBindingType(std::string name);
  std::string GPUBindingType(uint32_t value);
  
  uint32_t GPUBlendFactor(std::string name);
  std::string GPUBlendFactor(uint32_t value);
  
  uint32_t GPUBlendOperation(std::string name);
  std::string GPUBlendOperation(uint32_t value);
  
  uint32_t GPUBufferMapAsyncStatus(std::string name);
  std::string GPUBufferMapAsyncStatus(uint32_t value);
  
  uint32_t GPUCompareFunction(std::string name);
  std::string GPUCompareFunction(uint32_t value);
  
  uint32_t GPUCullMode(std::string name);
  std::string GPUCullMode(uint32_t value);
  
  uint32_t GPUErrorFilter(std::string name);
  std::string GPUErrorFilter(uint32_t value);
  
  uint32_t GPUErrorType(std::string name);
  std::string GPUErrorType(uint32_t value);
  
  uint32_t GPUFenceCompletionStatus(std::string name);
  std::string GPUFenceCompletionStatus(uint32_t value);
  
  uint32_t GPUFilterMode(std::string name);
  std::string GPUFilterMode(uint32_t value);
  
  uint32_t GPUFrontFace(std::string name);
  std::string GPUFrontFace(uint32_t value);
  
  uint32_t GPUIndexFormat(std::string name);
  std::string GPUIndexFormat(uint32_t value);
  
  uint32_t GPUInputStepMode(std::string name);
  std::string GPUInputStepMode(uint32_t value);
  
  uint32_t GPULoadOp(std::string name);
  std::string GPULoadOp(uint32_t value);
  
  uint32_t GPUStoreOp(std::string name);
  std::string GPUStoreOp(uint32_t value);
  
  uint32_t GPUPrimitiveTopology(std::string name);
  std::string GPUPrimitiveTopology(uint32_t value);
  
  uint32_t GPUStencilOperation(std::string name);
  std::string GPUStencilOperation(uint32_t value);
  
  uint32_t GPUTextureAspect(std::string name);
  std::string GPUTextureAspect(uint32_t value);
  
  uint32_t GPUTextureComponentType(std::string name);
  std::string GPUTextureComponentType(uint32_t value);
  
  uint32_t GPUTextureDimension(std::string name);
  std::string GPUTextureDimension(uint32_t value);
  
  uint32_t GPUTextureFormat(std::string name);
  std::string GPUTextureFormat(uint32_t value);
  
  uint32_t GPUTextureViewDimension(std::string name);
  std::string GPUTextureViewDimension(uint32_t value);
  
  uint32_t GPUVertexFormat(std::string name);
  std::string GPUVertexFormat(uint32_t value);
  

  
  DawnBindGroupBinding DecodeGPUBindGroupBinding(GPUDevice* device, Napi::Value& value);
  
  DawnBindGroupDescriptor DecodeGPUBindGroupDescriptor(GPUDevice* device, Napi::Value& value, void* nextInChain = nullptr);
  
  DawnBindGroupLayoutBinding DecodeGPUBindGroupLayoutBinding(GPUDevice* device, Napi::Value& value);
  
  DawnBindGroupLayoutDescriptor DecodeGPUBindGroupLayoutDescriptor(GPUDevice* device, Napi::Value& value, void* nextInChain = nullptr);
  
  DawnBlendDescriptor DecodeGPUBlendDescriptor(GPUDevice* device, Napi::Value& value);
  
  DawnColorStateDescriptor DecodeGPUColorStateDescriptor(GPUDevice* device, Napi::Value& value, void* nextInChain = nullptr);
  
  DawnBufferCopyView DecodeGPUBufferCopyView(GPUDevice* device, Napi::Value& value, void* nextInChain = nullptr);
  
  DawnBufferDescriptor DecodeGPUBufferDescriptor(GPUDevice* device, Napi::Value& value, void* nextInChain = nullptr);
  
  DawnCreateBufferMappedResult DecodeGPUCreateBufferMappedResult(GPUDevice* device, Napi::Value& value);
  
  DawnColor DecodeGPUColor(GPUDevice* device, Napi::Value& value);
  
  DawnCommandBufferDescriptor DecodeGPUCommandBufferDescriptor(GPUDevice* device, Napi::Value& value, void* nextInChain = nullptr);
  
  DawnCommandEncoderDescriptor DecodeGPUCommandEncoderDescriptor(GPUDevice* device, Napi::Value& value, void* nextInChain = nullptr);
  
  DawnComputePassDescriptor DecodeGPUComputePassDescriptor(GPUDevice* device, Napi::Value& value, void* nextInChain = nullptr);
  
  DawnComputePipelineDescriptor DecodeGPUComputePipelineDescriptor(GPUDevice* device, Napi::Value& value, void* nextInChain = nullptr);
  
  DawnDepthStencilStateDescriptor DecodeGPUDepthStencilStateDescriptor(GPUDevice* device, Napi::Value& value, void* nextInChain = nullptr);
  
  DawnExtent3D DecodeGPUExtent3D(GPUDevice* device, Napi::Value& value);
  
  DawnFenceDescriptor DecodeGPUFenceDescriptor(GPUDevice* device, Napi::Value& value, void* nextInChain = nullptr);
  
  DawnVertexAttributeDescriptor DecodeGPUVertexAttributeDescriptor(GPUDevice* device, Napi::Value& value);
  
  DawnVertexBufferDescriptor DecodeGPUVertexBufferDescriptor(GPUDevice* device, Napi::Value& value);
  
  DawnVertexInputDescriptor DecodeGPUVertexInputDescriptor(GPUDevice* device, Napi::Value& value, void* nextInChain = nullptr);
  
  DawnOrigin3D DecodeGPUOrigin3D(GPUDevice* device, Napi::Value& value);
  
  DawnPipelineLayoutDescriptor DecodeGPUPipelineLayoutDescriptor(GPUDevice* device, Napi::Value& value, void* nextInChain = nullptr);
  
  DawnPipelineStageDescriptor DecodeGPUPipelineStageDescriptor(GPUDevice* device, Napi::Value& value, void* nextInChain = nullptr);
  
  DawnRasterizationStateDescriptor DecodeGPURasterizationStateDescriptor(GPUDevice* device, Napi::Value& value, void* nextInChain = nullptr);
  
  DawnRenderBundleDescriptor DecodeGPURenderBundleDescriptor(GPUDevice* device, Napi::Value& value, void* nextInChain = nullptr);
  
  DawnRenderBundleEncoderDescriptor DecodeGPURenderBundleEncoderDescriptor(GPUDevice* device, Napi::Value& value, void* nextInChain = nullptr);
  
  DawnRenderPassColorAttachmentDescriptor DecodeGPURenderPassColorAttachmentDescriptor(GPUDevice* device, Napi::Value& value);
  
  DawnRenderPassDepthStencilAttachmentDescriptor DecodeGPURenderPassDepthStencilAttachmentDescriptor(GPUDevice* device, Napi::Value& value);
  
  DawnRenderPassDescriptor DecodeGPURenderPassDescriptor(GPUDevice* device, Napi::Value& value);
  
  DawnRenderPipelineDescriptor DecodeGPURenderPipelineDescriptor(GPUDevice* device, Napi::Value& value, void* nextInChain = nullptr);
  
  DawnSamplerDescriptor DecodeGPUSamplerDescriptor(GPUDevice* device, Napi::Value& value, void* nextInChain = nullptr);
  
  DawnShaderModuleDescriptor DecodeGPUShaderModuleDescriptor(GPUDevice* device, Napi::Value& value, void* nextInChain = nullptr);
  
  DawnStencilStateFaceDescriptor DecodeGPUStencilStateFaceDescriptor(GPUDevice* device, Napi::Value& value);
  
  DawnSwapChainDescriptor DecodeGPUSwapChainDescriptor(GPUDevice* device, Napi::Value& value, void* nextInChain = nullptr);
  
  DawnTextureCopyView DecodeGPUTextureCopyView(GPUDevice* device, Napi::Value& value, void* nextInChain = nullptr);
  
  DawnTextureDescriptor DecodeGPUTextureDescriptor(GPUDevice* device, Napi::Value& value, void* nextInChain = nullptr);
  
  DawnTextureViewDescriptor DecodeGPUTextureViewDescriptor(GPUDevice* device, Napi::Value& value, void* nextInChain = nullptr);
  

  
  class GPUBindGroupBinding {
    public:
      GPUBindGroupBinding(GPUDevice* device, Napi::Value& value);
      ~GPUBindGroupBinding();
      DawnBindGroupBinding* operator &() { return &descriptor; };
    private:
      DawnBindGroupBinding descriptor;
  };
  
  class GPUBindGroupDescriptor {
    public:
      GPUBindGroupDescriptor(GPUDevice* device, Napi::Value& value, void* nextInChain = nullptr);
      ~GPUBindGroupDescriptor();
      DawnBindGroupDescriptor* operator &() { return &descriptor; };
    private:
      DawnBindGroupDescriptor descriptor;
  };
  
  class GPUBindGroupLayoutBinding {
    public:
      GPUBindGroupLayoutBinding(GPUDevice* device, Napi::Value& value);
      ~GPUBindGroupLayoutBinding();
      DawnBindGroupLayoutBinding* operator &() { return &descriptor; };
    private:
      DawnBindGroupLayoutBinding descriptor;
  };
  
  class GPUBindGroupLayoutDescriptor {
    public:
      GPUBindGroupLayoutDescriptor(GPUDevice* device, Napi::Value& value, void* nextInChain = nullptr);
      ~GPUBindGroupLayoutDescriptor();
      DawnBindGroupLayoutDescriptor* operator &() { return &descriptor; };
    private:
      DawnBindGroupLayoutDescriptor descriptor;
  };
  
  class GPUBlendDescriptor {
    public:
      GPUBlendDescriptor(GPUDevice* device, Napi::Value& value);
      ~GPUBlendDescriptor();
      DawnBlendDescriptor* operator &() { return &descriptor; };
    private:
      DawnBlendDescriptor descriptor;
  };
  
  class GPUColorStateDescriptor {
    public:
      GPUColorStateDescriptor(GPUDevice* device, Napi::Value& value, void* nextInChain = nullptr);
      ~GPUColorStateDescriptor();
      DawnColorStateDescriptor* operator &() { return &descriptor; };
    private:
      DawnColorStateDescriptor descriptor;
  };
  
  class GPUBufferCopyView {
    public:
      GPUBufferCopyView(GPUDevice* device, Napi::Value& value, void* nextInChain = nullptr);
      ~GPUBufferCopyView();
      DawnBufferCopyView* operator &() { return &descriptor; };
    private:
      DawnBufferCopyView descriptor;
  };
  
  class GPUBufferDescriptor {
    public:
      GPUBufferDescriptor(GPUDevice* device, Napi::Value& value, void* nextInChain = nullptr);
      ~GPUBufferDescriptor();
      DawnBufferDescriptor* operator &() { return &descriptor; };
    private:
      DawnBufferDescriptor descriptor;
  };
  
  class GPUCreateBufferMappedResult {
    public:
      GPUCreateBufferMappedResult(GPUDevice* device, Napi::Value& value);
      ~GPUCreateBufferMappedResult();
      DawnCreateBufferMappedResult* operator &() { return &descriptor; };
    private:
      DawnCreateBufferMappedResult descriptor;
  };
  
  class GPUColor {
    public:
      GPUColor(GPUDevice* device, Napi::Value& value);
      ~GPUColor();
      DawnColor* operator &() { return &descriptor; };
    private:
      DawnColor descriptor;
  };
  
  class GPUCommandBufferDescriptor {
    public:
      GPUCommandBufferDescriptor(GPUDevice* device, Napi::Value& value, void* nextInChain = nullptr);
      ~GPUCommandBufferDescriptor();
      DawnCommandBufferDescriptor* operator &() { return &descriptor; };
    private:
      DawnCommandBufferDescriptor descriptor;
  };
  
  class GPUCommandEncoderDescriptor {
    public:
      GPUCommandEncoderDescriptor(GPUDevice* device, Napi::Value& value, void* nextInChain = nullptr);
      ~GPUCommandEncoderDescriptor();
      DawnCommandEncoderDescriptor* operator &() { return &descriptor; };
    private:
      DawnCommandEncoderDescriptor descriptor;
  };
  
  class GPUComputePassDescriptor {
    public:
      GPUComputePassDescriptor(GPUDevice* device, Napi::Value& value, void* nextInChain = nullptr);
      ~GPUComputePassDescriptor();
      DawnComputePassDescriptor* operator &() { return &descriptor; };
    private:
      DawnComputePassDescriptor descriptor;
  };
  
  class GPUComputePipelineDescriptor {
    public:
      GPUComputePipelineDescriptor(GPUDevice* device, Napi::Value& value, void* nextInChain = nullptr);
      ~GPUComputePipelineDescriptor();
      DawnComputePipelineDescriptor* operator &() { return &descriptor; };
    private:
      DawnComputePipelineDescriptor descriptor;
  };
  
  class GPUDepthStencilStateDescriptor {
    public:
      GPUDepthStencilStateDescriptor(GPUDevice* device, Napi::Value& value, void* nextInChain = nullptr);
      ~GPUDepthStencilStateDescriptor();
      DawnDepthStencilStateDescriptor* operator &() { return &descriptor; };
    private:
      DawnDepthStencilStateDescriptor descriptor;
  };
  
  class GPUExtent3D {
    public:
      GPUExtent3D(GPUDevice* device, Napi::Value& value);
      ~GPUExtent3D();
      DawnExtent3D* operator &() { return &descriptor; };
    private:
      DawnExtent3D descriptor;
  };
  
  class GPUFenceDescriptor {
    public:
      GPUFenceDescriptor(GPUDevice* device, Napi::Value& value, void* nextInChain = nullptr);
      ~GPUFenceDescriptor();
      DawnFenceDescriptor* operator &() { return &descriptor; };
    private:
      DawnFenceDescriptor descriptor;
  };
  
  class GPUVertexAttributeDescriptor {
    public:
      GPUVertexAttributeDescriptor(GPUDevice* device, Napi::Value& value);
      ~GPUVertexAttributeDescriptor();
      DawnVertexAttributeDescriptor* operator &() { return &descriptor; };
    private:
      DawnVertexAttributeDescriptor descriptor;
  };
  
  class GPUVertexBufferDescriptor {
    public:
      GPUVertexBufferDescriptor(GPUDevice* device, Napi::Value& value);
      ~GPUVertexBufferDescriptor();
      DawnVertexBufferDescriptor* operator &() { return &descriptor; };
    private:
      DawnVertexBufferDescriptor descriptor;
  };
  
  class GPUVertexInputDescriptor {
    public:
      GPUVertexInputDescriptor(GPUDevice* device, Napi::Value& value, void* nextInChain = nullptr);
      ~GPUVertexInputDescriptor();
      DawnVertexInputDescriptor* operator &() { return &descriptor; };
    private:
      DawnVertexInputDescriptor descriptor;
  };
  
  class GPUOrigin3D {
    public:
      GPUOrigin3D(GPUDevice* device, Napi::Value& value);
      ~GPUOrigin3D();
      DawnOrigin3D* operator &() { return &descriptor; };
    private:
      DawnOrigin3D descriptor;
  };
  
  class GPUPipelineLayoutDescriptor {
    public:
      GPUPipelineLayoutDescriptor(GPUDevice* device, Napi::Value& value, void* nextInChain = nullptr);
      ~GPUPipelineLayoutDescriptor();
      DawnPipelineLayoutDescriptor* operator &() { return &descriptor; };
    private:
      DawnPipelineLayoutDescriptor descriptor;
  };
  
  class GPUPipelineStageDescriptor {
    public:
      GPUPipelineStageDescriptor(GPUDevice* device, Napi::Value& value, void* nextInChain = nullptr);
      ~GPUPipelineStageDescriptor();
      DawnPipelineStageDescriptor* operator &() { return &descriptor; };
    private:
      DawnPipelineStageDescriptor descriptor;
  };
  
  class GPURasterizationStateDescriptor {
    public:
      GPURasterizationStateDescriptor(GPUDevice* device, Napi::Value& value, void* nextInChain = nullptr);
      ~GPURasterizationStateDescriptor();
      DawnRasterizationStateDescriptor* operator &() { return &descriptor; };
    private:
      DawnRasterizationStateDescriptor descriptor;
  };
  
  class GPURenderBundleDescriptor {
    public:
      GPURenderBundleDescriptor(GPUDevice* device, Napi::Value& value, void* nextInChain = nullptr);
      ~GPURenderBundleDescriptor();
      DawnRenderBundleDescriptor* operator &() { return &descriptor; };
    private:
      DawnRenderBundleDescriptor descriptor;
  };
  
  class GPURenderBundleEncoderDescriptor {
    public:
      GPURenderBundleEncoderDescriptor(GPUDevice* device, Napi::Value& value, void* nextInChain = nullptr);
      ~GPURenderBundleEncoderDescriptor();
      DawnRenderBundleEncoderDescriptor* operator &() { return &descriptor; };
    private:
      DawnRenderBundleEncoderDescriptor descriptor;
  };
  
  class GPURenderPassColorAttachmentDescriptor {
    public:
      GPURenderPassColorAttachmentDescriptor(GPUDevice* device, Napi::Value& value);
      ~GPURenderPassColorAttachmentDescriptor();
      DawnRenderPassColorAttachmentDescriptor* operator &() { return &descriptor; };
    private:
      DawnRenderPassColorAttachmentDescriptor descriptor;
  };
  
  class GPURenderPassDepthStencilAttachmentDescriptor {
    public:
      GPURenderPassDepthStencilAttachmentDescriptor(GPUDevice* device, Napi::Value& value);
      ~GPURenderPassDepthStencilAttachmentDescriptor();
      DawnRenderPassDepthStencilAttachmentDescriptor* operator &() { return &descriptor; };
    private:
      DawnRenderPassDepthStencilAttachmentDescriptor descriptor;
  };
  
  class GPURenderPassDescriptor {
    public:
      GPURenderPassDescriptor(GPUDevice* device, Napi::Value& value);
      ~GPURenderPassDescriptor();
      DawnRenderPassDescriptor* operator &() { return &descriptor; };
    private:
      DawnRenderPassDescriptor descriptor;
  };
  
  class GPURenderPipelineDescriptor {
    public:
      GPURenderPipelineDescriptor(GPUDevice* device, Napi::Value& value, void* nextInChain = nullptr);
      ~GPURenderPipelineDescriptor();
      DawnRenderPipelineDescriptor* operator &() { return &descriptor; };
    private:
      DawnRenderPipelineDescriptor descriptor;
  };
  
  class GPUSamplerDescriptor {
    public:
      GPUSamplerDescriptor(GPUDevice* device, Napi::Value& value, void* nextInChain = nullptr);
      ~GPUSamplerDescriptor();
      DawnSamplerDescriptor* operator &() { return &descriptor; };
    private:
      DawnSamplerDescriptor descriptor;
  };
  
  class GPUShaderModuleDescriptor {
    public:
      GPUShaderModuleDescriptor(GPUDevice* device, Napi::Value& value, void* nextInChain = nullptr);
      ~GPUShaderModuleDescriptor();
      DawnShaderModuleDescriptor* operator &() { return &descriptor; };
    private:
      DawnShaderModuleDescriptor descriptor;
  };
  
  class GPUStencilStateFaceDescriptor {
    public:
      GPUStencilStateFaceDescriptor(GPUDevice* device, Napi::Value& value);
      ~GPUStencilStateFaceDescriptor();
      DawnStencilStateFaceDescriptor* operator &() { return &descriptor; };
    private:
      DawnStencilStateFaceDescriptor descriptor;
  };
  
  class GPUSwapChainDescriptor {
    public:
      GPUSwapChainDescriptor(GPUDevice* device, Napi::Value& value, void* nextInChain = nullptr);
      ~GPUSwapChainDescriptor();
      DawnSwapChainDescriptor* operator &() { return &descriptor; };
    private:
      DawnSwapChainDescriptor descriptor;
  };
  
  class GPUTextureCopyView {
    public:
      GPUTextureCopyView(GPUDevice* device, Napi::Value& value, void* nextInChain = nullptr);
      ~GPUTextureCopyView();
      DawnTextureCopyView* operator &() { return &descriptor; };
    private:
      DawnTextureCopyView descriptor;
  };
  
  class GPUTextureDescriptor {
    public:
      GPUTextureDescriptor(GPUDevice* device, Napi::Value& value, void* nextInChain = nullptr);
      ~GPUTextureDescriptor();
      DawnTextureDescriptor* operator &() { return &descriptor; };
    private:
      DawnTextureDescriptor descriptor;
  };
  
  class GPUTextureViewDescriptor {
    public:
      GPUTextureViewDescriptor(GPUDevice* device, Napi::Value& value, void* nextInChain = nullptr);
      ~GPUTextureViewDescriptor();
      DawnTextureViewDescriptor* operator &() { return &descriptor; };
    private:
      DawnTextureViewDescriptor descriptor;
  };
  

  
  void DestroyGPUBindGroupBinding(DawnBindGroupBinding descriptor);
  
  void DestroyGPUBindGroupDescriptor(DawnBindGroupDescriptor descriptor);
  
  void DestroyGPUBindGroupLayoutBinding(DawnBindGroupLayoutBinding descriptor);
  
  void DestroyGPUBindGroupLayoutDescriptor(DawnBindGroupLayoutDescriptor descriptor);
  
  void DestroyGPUBlendDescriptor(DawnBlendDescriptor descriptor);
  
  void DestroyGPUColorStateDescriptor(DawnColorStateDescriptor descriptor);
  
  void DestroyGPUBufferCopyView(DawnBufferCopyView descriptor);
  
  void DestroyGPUBufferDescriptor(DawnBufferDescriptor descriptor);
  
  void DestroyGPUCreateBufferMappedResult(DawnCreateBufferMappedResult descriptor);
  
  void DestroyGPUColor(DawnColor descriptor);
  
  void DestroyGPUCommandBufferDescriptor(DawnCommandBufferDescriptor descriptor);
  
  void DestroyGPUCommandEncoderDescriptor(DawnCommandEncoderDescriptor descriptor);
  
  void DestroyGPUComputePassDescriptor(DawnComputePassDescriptor descriptor);
  
  void DestroyGPUComputePipelineDescriptor(DawnComputePipelineDescriptor descriptor);
  
  void DestroyGPUDepthStencilStateDescriptor(DawnDepthStencilStateDescriptor descriptor);
  
  void DestroyGPUExtent3D(DawnExtent3D descriptor);
  
  void DestroyGPUFenceDescriptor(DawnFenceDescriptor descriptor);
  
  void DestroyGPUVertexAttributeDescriptor(DawnVertexAttributeDescriptor descriptor);
  
  void DestroyGPUVertexBufferDescriptor(DawnVertexBufferDescriptor descriptor);
  
  void DestroyGPUVertexInputDescriptor(DawnVertexInputDescriptor descriptor);
  
  void DestroyGPUOrigin3D(DawnOrigin3D descriptor);
  
  void DestroyGPUPipelineLayoutDescriptor(DawnPipelineLayoutDescriptor descriptor);
  
  void DestroyGPUPipelineStageDescriptor(DawnPipelineStageDescriptor descriptor);
  
  void DestroyGPURasterizationStateDescriptor(DawnRasterizationStateDescriptor descriptor);
  
  void DestroyGPURenderBundleDescriptor(DawnRenderBundleDescriptor descriptor);
  
  void DestroyGPURenderBundleEncoderDescriptor(DawnRenderBundleEncoderDescriptor descriptor);
  
  void DestroyGPURenderPassColorAttachmentDescriptor(DawnRenderPassColorAttachmentDescriptor descriptor);
  
  void DestroyGPURenderPassDepthStencilAttachmentDescriptor(DawnRenderPassDepthStencilAttachmentDescriptor descriptor);
  
  void DestroyGPURenderPassDescriptor(DawnRenderPassDescriptor descriptor);
  
  void DestroyGPURenderPipelineDescriptor(DawnRenderPipelineDescriptor descriptor);
  
  void DestroyGPUSamplerDescriptor(DawnSamplerDescriptor descriptor);
  
  void DestroyGPUShaderModuleDescriptor(DawnShaderModuleDescriptor descriptor);
  
  void DestroyGPUStencilStateFaceDescriptor(DawnStencilStateFaceDescriptor descriptor);
  
  void DestroyGPUSwapChainDescriptor(DawnSwapChainDescriptor descriptor);
  
  void DestroyGPUTextureCopyView(DawnTextureCopyView descriptor);
  
  void DestroyGPUTextureDescriptor(DawnTextureDescriptor descriptor);
  
  void DestroyGPUTextureViewDescriptor(DawnTextureViewDescriptor descriptor);
  
}

#endif
