#include "index.h"

#include "GPU.h"
#include "GPUDevice.h"
#include "GPUAdapter.h"
#include "GPUQueue.h"
#include "GPUFence.h"
#include "GPUBuffer.h"
#include "GPUTexture.h"
#include "GPUTextureView.h"
#include "GPUSampler.h"
#include "GPUBindGroupLayout.h"
#include "GPUPipelineLayout.h"
#include "GPUBindGroup.h"
#include "GPUShaderModule.h"
#include "GPURenderPipeline.h"
#include "GPUComputePipeline.h"
#include "GPUCanvasContext.h"
#include "GPUSwapChain.h"
#include "GPUCommandBuffer.h"
#include "GPUCommandEncoder.h"
#include "GPURenderPassEncoder.h"
#include "GPUComputePassEncoder.h"
#include "GPURenderBundle.h"
#include "GPURenderBundleEncoder.h"
#if 0
#include "GPURayTracingAccelerationContainer.h"
#include "GPURayTracingShaderBindingTable.h"
#include "GPURayTracingPipeline.h"
#include "GPURayTracingPassEncoder.h"
#endif

#include "WebGPUWindow.h"

#ifdef _WIN32
#include <windows.h>

static const wchar_t kTagForGetModuleHandleEx[] = L"kernel32.dll";
std::string GetModulePath() {
  HMODULE moduleHandle;
  uint32_t flags = (
    GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS |
    GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT
  );
  if (GetModuleHandleEx(flags, kTagForGetModuleHandleEx, &moduleHandle) == 0) {
    return "";
  }
  char lpFilename[MAX_PATH];
  if (GetModuleFileNameA(moduleHandle, lpFilename, sizeof(lpFilename)) == 0) {
    return "";
  }
  std::string moduleDirPath = std::string(lpFilename);
  size_t lastPathSepLoc = moduleDirPath.find_last_of("\\");
  return lastPathSepLoc != std::string::npos ? moduleDirPath.substr(0, lastPathSepLoc + 1) : "";
}
#endif

Napi::Object Init(Napi::Env env, Napi::Object exports) {

  GPU::Initialize(env, exports);
  GPUAdapter::Initialize(env, exports);
  GPUDevice::Initialize(env, exports);
  GPUQueue::Initialize(env, exports);
  GPUFence::Initialize(env, exports);
  GPUBuffer::Initialize(env, exports);
  GPUTexture::Initialize(env, exports);
  GPUTextureView::Initialize(env, exports);
  GPUSampler::Initialize(env, exports);
  GPUBindGroupLayout::Initialize(env, exports);
  GPUPipelineLayout::Initialize(env, exports);
  GPUBindGroup::Initialize(env, exports);
  GPUShaderModule::Initialize(env, exports);
  GPURenderPipeline::Initialize(env, exports);
  GPUComputePipeline::Initialize(env, exports);
  GPUCanvasContext::Initialize(env, exports);
  GPUSwapChain::Initialize(env, exports);
  GPUCommandBuffer::Initialize(env, exports);
  GPUCommandEncoder::Initialize(env, exports);
  GPURenderPassEncoder::Initialize(env, exports);
  GPUComputePassEncoder::Initialize(env, exports);
  GPURenderBundle::Initialize(env, exports);
  GPURenderBundleEncoder::Initialize(env, exports);
#if 0
  GPURayTracingAccelerationContainer::Initialize(env, exports);
  GPURayTracingShaderBindingTable::Initialize(env, exports);
  GPURayTracingPipeline::Initialize(env, exports);
  GPURayTracingPassEncoder::Initialize(env, exports);
#endif

  WebGPUWindow::Initialize(env, exports);

  {% for bitmask in bitmasks %}
  Napi::Object {{ bitmask.externalName }} = Napi::Object::New(env);
    {%- for member in bitmask.children %}
    {{ bitmask.externalName }}.Set(
      Napi::String::New(env, "{{ member.name }}"),
      Napi::Number::New(env, {{ member.value }})
    );
    {%- endfor %}
  exports["{{ bitmask.externalName }}"] = {{ bitmask.externalName }};
  {% endfor %}

#ifdef _WIN32
  std::string modulePath = GetModulePath();
  std::string dxilPath = modulePath + "dxil.dll";
  if (LoadLibraryA(dxilPath.c_str()) == nullptr) {
    printf("Failed to load DXIL\n");
  }
  std::string dxcPath = modulePath + "dxcompiler.dll";
  if (LoadLibraryA(dxcPath.c_str()) == nullptr) {
    printf("Failed to load DXC\n");
  }
#endif

  return exports;
}

NODE_API_MODULE(addon, Init)
